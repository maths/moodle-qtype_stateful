<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 833  -->
  <question type="stateful">
    <name>
      <text>EXAMPLE: Partial integration</text>
    </name>
    <questiontext format="html">
      <text>The original example question for Stateful.

Scoring here:
 max 1 from the initial selection
 max 2 from the repeated selections
 max 1 from the final integration</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>4.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
<stateful statefulversion="2020040800" stackversion="2020040300" entryscene="intro" questionsimplify="1" assumepositive="0" assumereal="0" penalty="0.3333333" multiplicationsign="dot" sqrtsign="1" complexno="i" inversetrig="cos-1" matrixparens="[" parlength="-1" variants="{&quot;_set&quot;:&quot;B&quot;,&quot;A&quot;:[],&quot;B&quot;:[3,4,14,22,25,52,59,86],&quot;C&quot;:[2,11,18,24,31,32,37,65]}">
  <questionvariables>
<text>/* We adjust the presentation of integrals in the whole question
   with this. Essenttially, it keeps the multiplier within 
   the integral sign, which makes the presentation a bit more 
   concise and we have plenty of multipliers.*/
remove(integrate, outative);

/* The expression to integrate is of the form a*x^b*e^(c*x) 
   we do limit the c to be a positive integer as the solution 
   process will not behave well otherwise. */
/* This author uses _ as a markker for simple parameters to 
   avoid tying possible integration constants the student might 
   use.*/
_c: rand([2,3,4]);
/* In demonstrations one might want to keep this small. */
_b: rand([3,4]);
/* Selection of a should be done with some care as the numbers 
   coming out due to b and c can get annoying quite soon. */
tmp: integrate(x^_b*exp(_c*x), x);
tmp: coeff(expand(tmp), exp(_c*x));
denoms: [];
dumvar: for b:0 thru _b do 
	denoms: append(denoms, [denom(coeff(tmp, x, b))]);
_a: lcm(denoms)/rand(denoms);</text>

  </questionvariables>
  <questionnote>
<text>{@'int(_a*x^_b*exp(_c*x),x)@}</text>

  </questionnote>
  <variable name="us" type="List" initialvalue="[]" number="6">
    <description>
<text>The selections for \(u\).</text>

    </description>
  </variable>
  <variable name="vs" type="List" initialvalue="[]" number="7">
    <description>
<text>The selections for \(v\).</text>

    </description>
  </variable>
  <variable name="dus" type="List" initialvalue="[]" number="8">
    <description>
<text>The selections for \(du\).</text>

    </description>
  </variable>
  <variable name="dvs" type="List" initialvalue="[]" number="9">
    <description>
<text>The selections for \(dv\).</text>

    </description>
  </variable>
  <variable name="selectionTypes" type="List" initialvalue="[]" number="10">
    <description>
<text>Classifications of the selected terms. Both in the sense of wrong or right direction but also in the sense of distribution.</text>

    </description>
  </variable>
  <scene name="intro">
    <description>
<text>The introduction to the subject.</text>

    </description>
    <scenevariables>
<text>toIntegrate: _a*x^_b*exp(_c*x);
ta_u: _a*x^_b;
ta_du: _a*_b*x^(_b-1);
ta_dv: exp(_c*x);
ta_v: exp(_c*x)/_c;</text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<p>In this question we want you to apply integration by parts to</p>
\[
{@'integrate(toIntegrate,x)@}.
\]
<p>As a reminder by integration by parts we mean</p>
\[
\int{ u(x)v'(x)\;\mathrm{d}x} = u(x)v(x) - \int{ v(x)u'(x)\;\mathrm{d}x}.
\]
<p>To start the exercise select \(u(x)\) and \(v'(x)\) for the first 
integral \({@'integrate(toIntegrate,x)@}\).</p>
<table style="margin-left:auto;margin-right:auto;">
 <tr>
  <td style="text-align:right;">\(u(x)=\)</td><td>[[input:ansu]]</td>
  <td style="text-align:right;">\(v'(x)=\)</td><td>[[input:ansdv]]</td>
 </tr>
 <tr>
  <td style="text-align:right;">\(u'(x)=\)</td><td>[[input:ansdu]]</td>
  <td style="text-align:right;">\(v(x)=\)</td><td>[[input:ansv]]</td>
 </tr>
 <tr>
  <td colspan="4">[[validation:combo]]</td>
 </tr>
 <tr>
  <td colspan="4">[[feedback:select]]</td>
 </tr>
</table>]]></text>
    </scenetext>
    <input name="ansu" type="algebraic" input-width="10" forbid-words="&quot;[[basic-calculus]]&quot;" validation-box="&quot;combo&quot;" require-same-type="true" require-lowest-terms="true" fix-spaces="true" fix-stars="true" syntax-hint-type="0" tans="&quot;ta_u&quot;"/>
    <input name="ansv" type="algebraic" input-width="10" forbid-words="&quot;[[basic-calculus]]&quot;" validation-box="&quot;combo&quot;" require-same-type="true" require-lowest-terms="true" fix-spaces="true" fix-stars="true" syntax-hint-type="0" tans="&quot;ta_v&quot;"/>
    <input name="ansdv" type="algebraic" input-width="10" forbid-words="&quot;[[basic-calculus]]&quot;" validation-box="&quot;combo&quot;" require-same-type="true" require-lowest-terms="true" fix-spaces="true" fix-stars="true" syntax-hint-type="0" tans="&quot;ta_dv&quot;"/>
    <input name="ansdu" type="algebraic" input-width="10" forbid-words="&quot;[[basic-calculus]]&quot;" validation-box="&quot;combo&quot;" require-same-type="true" require-lowest-terms="true" fix-spaces="true" fix-stars="true" syntax-hint-type="0" tans="&quot;ta_du&quot;"/>
    <vbox name="combo" type="custom" text="&quot;&lt;p&gt;Your answer was interpreted as:&lt;\/p&gt;\n&lt;table style=\&quot;margin-left:auto;margin-right:auto;\&quot;&gt;\n\t&lt;tr&gt;\n    \t&lt;td style=\&quot;text-align:right;\&quot;&gt;\\(u(x)=\\)&lt;\/td&gt;&lt;td style=\&quot;padding-right:2em;\&quot;&gt;{@ansu@}&lt;\/td&gt;\n        &lt;td style=\&quot;text-align:right;\&quot;&gt;\\(v'(x)=\\)&lt;\/td&gt;&lt;td&gt;{@ansdv@}&lt;\/td&gt;\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n    \t&lt;td style=\&quot;text-align:right;\&quot;&gt;\\(u'(x)=\\)&lt;\/td&gt;&lt;td style=\&quot;padding-right:2em;\&quot;&gt;{@ansdu@}&lt;\/td&gt;\n        &lt;td style=\&quot;text-align:right;\&quot;&gt;\\(v(x)=\\)&lt;\/td&gt;&lt;td&gt;{@ansv@}&lt;\/td&gt;\n    &lt;\/tr&gt;\n&lt;\/table&gt;\n[[ if test=\&quot;not (%_valid_ansu and %_valid_ansdv and %_valid_ansdu and %_valid_ansv)\&quot;]]\n&lt;p&gt;Please fill in all four correctly.&lt;\/p&gt;\n[[ else ]]\n&lt;p&gt;Now that all four have been given use the \&quot;check\&quot;-button to check them and if they fill the conditions we will move onwards.&lt;\/p&gt;\n[[\/if]]\n[[list_errors:ansu,ansdu,ansv,ansdv]]\n[[list_variables:ansu,ansdu,ansv,ansdv]]&quot;"/>
    <prt name="select" value="1.0000000" firstnodename="do the parts match" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text>/* We need to ensure more active simplification here. */
_dir:coeff(ansu,exp(_c*x)),simp;</text>

      </feedbackvariables>
      <node name="do the parts match" test="AlgEquiv" sans="ansu*ansdv" tans="toIntegrate" options="" quiet="1">
        <true scoremode="=" score="0" penaltymode="=" penalty="" nextnode="du matches u">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<p>Your \(u(x)v'(x)\) is not equal to the required \({@toIntegrate@}\).</p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Not matching","condition":"true","inputs":{"ansu":"x","ansv":"x","ansdv":"x","ansdu":"x"}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="du matches u" test="AlgEquiv" sans="ansdu" tans="diff(ansu, x)" options="" quiet="1">
        <true scoremode="+" score="" penaltymode="+" penalty="" nextnode="v matches dv">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="+" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<p>\(u'(x)\) does not seem to be the derivate of \(u(x)\).</p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"du is wrong","condition":"true","inputs":{"ansu":"ta_u","ansv":"ta_v","ansdv":"ta_dv","ansdu":"integrate(ta_u, x)+x"}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="v matches dv" test="AlgEquiv" sans="ansdv" tans="diff(ansv, x)" options="" quiet="1">
        <true scoremode="+" score="" penaltymode="+" penalty="" nextnode="which direction">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="+" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<p>\(v'(x)\) does not seem to be the derivate of \(v(x)\).</p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"v not matching","condition":"true","inputs":{"ansu":"ta_u","ansv":"ta_v+x+1","ansdv":"ta_dv","ansdu":"ta_du"}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="which direction" test="AlgEquiv" sans="_dir" tans="0" options="" quiet="1">
        <true scoremode="=" score="1" penaltymode="=" penalty="0" nextnode="$SCENE:decide">
          <variables>
<text>/* Remember the values */
us:[ansu];
vs:[ansv];
dus:[ansdu];
dvs:[ansdv];
/* This is the correct direction
   lets signal that with 1. */
selectionTypes:[1];</text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Correct direction","condition":"is(ta_u#0)","inputs":{"ansu":"ta_u","ansv":"ta_v","ansdv":"ta_dv","ansdu":"ta_du"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="1" penaltymode="=" penalty="0" nextnode="$SCENE:decide">
          <variables>
<text>/* Remember the values */
us:[ansu];
vs:[ansv];
dus:[ansdu];
dvs:[ansdv];
/* This is the wrong direction
   lets signal that with -1. */
selectionTypes:[-1];</text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Wrong direction","condition":"true","inputs":{"ansu":"exp(_c*x)","ansv":"_a*x^(_b+1)\/(_b+1)","ansdv":"_a*x^_b","ansdu":"_c*exp(_c*x)"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="decide">
    <description>
<text>In this scene the decides what to do with the result of the partition.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<p>Your selection placed to the formula leads to:</p>
<table style="margin-left: auto;margin-right: auto;">
<tr><td style="text-align:right;">\(u(x)=\)</td><td>\({@last(us)@}\)</td><td>&nbsp;</td>
<td style="text-align:right;">\(v'(x)=\)</td><td>\({@last(dvs)@}\)</td><td rowspan="2">\[\;\rightarrow\;\]</td><td rowspan="2">
\[
\int{ {@last(us)*last(dvs)@}\;\mathrm{d}x} =
 {@last(us)*last(vs)@} - \int{ {@last(dus)*last(vs)@}\;\mathrm{d}x}
\]</td></tr>
<tr><td style="text-align:right;">\(u'(x)=\)</td><td>\({@last(dus)@}\)</td><td>&nbsp;</td>
<td style="text-align:right;">\(v(x)=\)</td><td>\({@last(vs)@}\)</td></tr>
</table>
<p>which means that you will still have to integrate</p>
\[
\int{ {@last(vs)*last(dus)@}\;\mathrm{d}x}.
\]
<p>If you wish you may try to integrate it directly, but note that this question 
gives points for the actual partial integration steps, so do that once you have done them.</p>
<p>\(\int{ {@last(vs)*last(dus)@}\;\mathrm{d}x}=\)[[input:integration]]</p>
<div>[[validation:integration]]</div>
<div>[[feedback:quickExit]]</div>
<p>Or you can just repeat the partition step or undo it if you feel like selectinǵ otherwise.</p>
[[ if test="last(vs)*last(dus)=0"]]
<p><b>You should have been able to integrate the expressions just fine on the last step, and now it should be trivial. Do not repeat anymore...</b></p>
[[/if]]
[[ if test="is(length(selectionTypes) > 1) and 
            is(lastn(selectionTypes,2)[1] < 0) and
            is(lastn(selectionTypes,2)[2] < 0)"]]
<p><b>Have you noticed that if you select the {@exp(_c*x)@} term as {@u@} the order of the expression rises? Surely it would be simpler to integrate if that order went down instead?</b></p>
[[/ if]]
<p>[[input:repeatButton]] [[input:undoButton]]</p>
<div>[[feedback:decision]]</div>]]></text>
    </scenetext>
    <input name="integration" type="algebraic" input-width="20" require-same-type="true" require-lowest-terms="true" syntax-hint-type="0" tans="&quot;integrate(last(vs)*last(dus), x)&quot;"/>
    <input name="repeatButton" type="button" input-value="&quot;\&quot;repeat\&quot;&quot;" input-label="&quot;Repeat&quot;"/>
    <input name="undoButton" type="button" alias-for="&quot;repeatButton&quot;" input-value="&quot;\&quot;undo\&quot;&quot;" input-label="&quot;Undo&quot;"/>
    <prt name="decision" value="1.0000000" firstnodename="Repeat" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text>/* Note how we have two button inputs but only read the other.
   this is a special feature of the button input type allowing 
   any button set the values of other button inputs so that one
   can read the selected value of connected buttons from just 
   one this should lessen the need to create multiple PRTs to do 
   similar things as PRTs only trigger when the specific inputs
   they follow activate and in the case of buttons only one can 
   be active unless they have been bound like here.
   
   Buttons like these are basically MCQ inputs with integrated 
   submit which makes them inputs of their own their own type.
 */</text>

      </feedbackvariables>
      <node name="Repeat" test="AlgEquiv" sans="repeatButton" tans="&quot;repeat&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:repeat">
          <variables>
<text>/* No transition variables needed we can continue with the previous state. */</text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Repeat","condition":"is(length(SCENE_PATH) < 20) ","inputs":{"repeatButton":"\"repeat\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="Undo">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Undo" test="AlgEquiv" sans="repeatButton" tans="&quot;undo&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="Type of Undo">
          <variables>
<text>/* We should probably remember the undos. */
vs: lastn(vs, length(vs) - 1);
us: lastn(us, length(us) - 1);
dus: lastn(dus, length(dus) - 1);
dvs: lastn(dvs, length(dvs) - 1);</text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Type of Undo" test="AlgEquiv" sans="length(vs)" tans="1" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:intro">
          <variables>
<text>/* If we go back to the intro we need to empty the lists and if we do that we need to go to the intro... */
vs:[];
us:[];
dus:[];
dvs:[];</text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Undo at start","condition":"is(length(vs)=1)","inputs":{"repeatButton":"\"undo\"","undoButton":""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="$SCENE:repeat">
          <variables>
<text>/* We should probably remember the undos. */
vs: reverse(lastn(reverse(vs), length(vs) - 1));
us: reverse(lastn(reverse(us), length(us) - 1));
dus: reverse(lastn(reverse(dus), length(dus) - 1));
dvs: reverse(lastn(reverse(dvs), length(dvs) - 1));</text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Undo later","condition":"is(length(vs)#1)","inputs":{"repeatButton":"\"undo\"","undoButton":""}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="quickExit" value="1.0000000" firstnodename="Just do it" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Just do it" test="Int" sans="integration" tans="ev(integrate(last(vs)*last(dus),x),simp)" options="x" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:end">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Integrate it","condition":"true","inputs":{"integration":"ev(integrate(last(vs)*last(dus), x)+c,simp)"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text>Well, that was not quite it.</text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Failure to integrate","condition":"true","inputs":{"integration":"ev(diff(last(vs)*last(dus), x),simp)"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="repeat">
    <description>
<text>The scene where one continues the steps.</text>

    </description>
    <scenevariables>
<text>toIntegrate: last(dus)*last(vs);
ta_u: coeff(toIntegrate,exp(_c*x));
ta_du: diff(ta_u,x);
ta_dv: exp(_c*x);
ta_v: integrate(ta_dv,x);
if not is(coeff(toIntegrate,exp(_c*x))=0) then (
	wta_u: exp(_c*x),
	wta_du: diff(wta_u,x),
	wta_dv: coeff(toIntegrate,exp(_c*x)),
	wta_v: integrate(wta_dv,x)
);</text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<p>So we now have to integrate the remainder:</p>
\[
{@'integrate(toIntegrate,x)@}.
\]
<p>For reference we still use \( \int{ u \mathrm{d}v} = u v - \int{ v \mathrm{d}u} \)</p>
<p>Do select the parts for this step:</p>
<table style="margin-left:auto;margin-right:auto;">
 <tr>
  <td style="text-align:right;">\(u(x)=\)</td><td>[[input:ansu]]</td>
  <td style="text-align:right;">\(v'(x)=\)</td><td>[[input:ansdv]]</td>
 </tr>
 <tr>
  <td style="text-align:right;">\(u'(x)=\)</td><td>[[input:ansdu]]</td>
  <td style="text-align:right;">\(v(x)=\)</td><td>[[input:ansv]]</td>
 </tr>
 <tr>
  <td colspan="4">[[validation:combo]]</td>
 </tr>
 <tr>
  <td colspan="4">[[feedback:select]]</td>
 </tr>
</table>
[[ if test="is(length(selectionTypes) > 1) and 
            is(lastn(selectionTypes,2)[1] < 0) and
            is(lastn(selectionTypes,2)[2] < 0)"]]
<p><b>Have you noticed that if you select the {@exp(_c*x)@} term as {@u@} the order of the expression rises? Surely it would be simpler to integrate if that order went down instead?</b></p>
[[/ if]]]]></text>
    </scenetext>
    <input name="ansu" type="algebraic" input-width="10" forbid-words="&quot;[[basic-calculus]]&quot;" validation-box="&quot;combo&quot;" require-same-type="true" require-lowest-terms="true" fix-spaces="true" fix-stars="true" syntax-hint-type="0" tans="&quot;ta_u&quot;"/>
    <input name="ansv" type="algebraic" input-width="10" forbid-words="&quot;[[basic-calculus]]&quot;" validation-box="&quot;combo&quot;" require-same-type="true" require-lowest-terms="true" fix-spaces="true" fix-stars="true" syntax-hint-type="0" tans="&quot;ta_v&quot;"/>
    <input name="ansdv" type="algebraic" input-width="10" forbid-words="&quot;[[basic-calculus]]&quot;" validation-box="&quot;combo&quot;" require-same-type="true" require-lowest-terms="true" fix-spaces="true" fix-stars="true" syntax-hint-type="0" tans="&quot;ta_dv&quot;"/>
    <input name="ansdu" type="algebraic" input-width="10" forbid-words="&quot;[[basic-calculus]]&quot;" validation-box="&quot;combo&quot;" require-same-type="true" require-lowest-terms="true" fix-spaces="true" fix-stars="true" syntax-hint-type="0" tans="&quot;ta_du&quot;"/>
    <vbox name="combo" type="custom" text="&quot;&lt;p&gt;Your answer was interpreted as:&lt;\/p&gt;\n&lt;table style=\&quot;margin-left:auto;margin-right:auto;\&quot;&gt;\n\t&lt;tr&gt;\n    \t&lt;td style=\&quot;text-align:right;\&quot;&gt;\\(u(x)=\\)&lt;\/td&gt;&lt;td style=\&quot;padding-right:2em;\&quot;&gt;{@ansu@}&lt;\/td&gt;\n        &lt;td style=\&quot;text-align:right;\&quot;&gt;\\(v'(x)=\\)&lt;\/td&gt;&lt;td&gt;{@ansdv@}&lt;\/td&gt;\n    &lt;\/tr&gt;\n    &lt;tr&gt;\n    \t&lt;td style=\&quot;text-align:right;\&quot;&gt;\\(u'(x)=\\)&lt;\/td&gt;&lt;td style=\&quot;padding-right:2em;\&quot;&gt;{@ansdu@}&lt;\/td&gt;\n        &lt;td style=\&quot;text-align:right;\&quot;&gt;\\(v(x)=\\)&lt;\/td&gt;&lt;td&gt;{@ansv@}&lt;\/td&gt;\n    &lt;\/tr&gt;\n&lt;\/table&gt;\n[[ if test=\&quot;not (%_valid_ansu and %_valid_ansdv and %_valid_ansdu and %_valid_ansv)\&quot;]]\n&lt;p&gt;Please fill in all four correctly.&lt;\/p&gt;\n[[ else ]]\n&lt;p&gt;Now that all four have been given use the \&quot;check\&quot;-button to check them and if they fill the conditions we will move onwards.&lt;\/p&gt;\n[[\/if]]\n[[list_errors:ansu,ansdu,ansv,ansdv]]\n[[list_variables:ansu,ansdu,ansv,ansdv]]&quot;"/>
    <prt name="select" value="1.0000000" firstnodename="do the parts match" scoremode="bestn" scoremodeparameters="2">
      <feedbackvariables>
<text>/* We need to ensure more active simplification here. */
_dir:coeff(ansu,exp(_c*x)),simp;</text>

      </feedbackvariables>
      <node name="do the parts match" test="AlgEquiv" sans="ansu*ansdv" tans="toIntegrate" options="" quiet="1">
        <true scoremode="=" score="0" penaltymode="=" penalty="" nextnode="du matches u">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<p>Your \(u(x)v'(x)\) is not equal to the required \({@toIntegrate@}\).</p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Not matching","condition":"true","inputs":{"ansu":"x","ansv":"x","ansdv":"x","ansdu":"x"}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="du matches u" test="AlgEquiv" sans="ansdu" tans="diff(ansu, x)" options="" quiet="1">
        <true scoremode="+" score="" penaltymode="+" penalty="" nextnode="v matches dv">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="+" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<p>\(u'(x)\) does not seem to be the derivate of \(u(x)\).</p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"du is wrong","condition":"true","inputs":{"ansu":"ta_u","ansv":"ta_v","ansdv":"ta_dv","ansdu":"integrate(ta_u,x)+1"}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="v matches dv" test="AlgEquiv" sans="ansdv" tans="diff(ansv, x)" options="" quiet="1">
        <true scoremode="+" score="" penaltymode="+" penalty="" nextnode="which direction">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="+" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<p>\(v'(x)\) does not seem to be the derivate of \(v(x)\).</p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"v not matching","condition":"true","inputs":{"ansu":"ta_u","ansv":"ta_v+x","ansdv":"ta_dv","ansdu":"ta_du"}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="which direction" test="AlgEquiv" sans="_dir" tans="0" options="" quiet="1">
        <true scoremode="=" score="1" penaltymode="=" penalty="0" nextnode="$SCENE:decide">
          <variables>
<text>/* Remember the values */
us:append(us,[ansu]);
vs:append(vs,[ansv]);
dus:append(dus,[ansdu]);
dvs:append(dvs,[ansdv]);
/* This is the correct direction
   lets signal that with 1. */
selectionTypes:append(selectionTypes,[1]);</text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Correct direction","condition":"true","inputs":{"ansu":"ta_u","ansv":"ta_v","ansdv":"ta_dv","ansdu":"ta_du"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0.5" penaltymode="=" penalty="0" nextnode="$SCENE:decide">
          <variables>
<text>/* Remember the values */
us:append(us,[ansu]);
vs:append(vs,[ansv]);
dus:append(dus,[ansdu]);
dvs:append(dvs,[ansdv]);
/* This is the wrong direction
   lets signal that with -1. */
selectionTypes:append(selectionTypes,[-1]);</text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Wrong direction","condition":"not is(coeff(toIntegrate,exp(_c*x))=0)","inputs":{"ansu":"wta_u","ansv":"wta_v","ansdv":"wta_dv","ansdu":"wta_du"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="end">
    <description>
<text>The end of the question. Lets look into what happened.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<p>Congratulations, you integrated it.</p>
<p>\[{@'integrate(_a*x^_b*exp(_c*x), x)@} = {@expand(integrate(_a*x^_b*exp(_c*x), x))@}+C\]</p>]]></text>
    </scenetext>
  </scene>
</stateful>  </question>

<!-- question: 834  -->
  <question type="stateful">
    <name>
      <text>TECH: Algebraic input options tester</text>
    </name>
    <questiontext format="html">
      <text>This is not a question of any kind it is just a test of the system, there is no PRT-logic present just arrays of inputs so one can see their validation.</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
<stateful statefulversion="2020040800" stackversion="2020040300" entryscene="A" questionsimplify="1" assumepositive="0" assumereal="0" penalty="0.3333333" multiplicationsign="dot" sqrtsign="1" complexno="i" inversetrig="cos-1" matrixparens="[" parlength="-1" variants="{&quot;_set&quot;:&quot;_free&quot;,&quot;A&quot;:[],&quot;B&quot;:[],&quot;C&quot;:[]}">
  <questionvariables>
<text></text>

  </questionvariables>
  <questionnote>
<text></text>

  </questionnote>
  <scene name="A">
    <description>
<text>No desc for scene A</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<p>The tables here try to cover most relevant combinations of input options for the algebraic input, not all though. To ease operation we have a single scripted input at the top so that one can set all the inputs values to the same.</p>
<p>All inputs have customised validation displays to show the results in more detail than the default validation. Also the examples are clickable.</p>
<p>Set all to: [[input:ans]]</p>
[[jsxgraph input-ref-ans='inputprefix' height='1px']]
/* JSXGraph blocks allow direct JavaScript access that can be used
 * to do many things, just set the size of the div reserved for the
 * graph that you are not actually building. Or hide it.
 */
var input = $('#' + $.escapeSelector(inputprefix));
input.on('input', function() {
  var val = input.val();
  for (var i=1; i < 39; i++) {
    var otherinput = $('#' + $.escapeSelector(inputprefix + i));
    otherinput.val(val);
    if (otherinput.length > 0) {
      var e = new Event('input');
      otherinput[0].dispatchEvent(e);
      e = new Event('change');
      otherinput[0].dispatchEvent(e);
    }
  }
});
var samples = $('code.clicksample');
samples.on('click', function(e) {
  var val = $(e.target).text();
  for (var i=1; i < 39; i++) {
    var otherinput = $('#' + $.escapeSelector(inputprefix + i));
    otherinput.val(val);
    if (otherinput.length > 0) {
      var e = new Event('input');
      otherinput[0].dispatchEvent(e);
      e = new Event('change');
      otherinput[0].dispatchEvent(e);
    }
  }
});
[[/jsxgraph]]

<h4>Default settings and tolerance for fixes</h4>
<p>The fix_stars and fix_spaces settings control whether the input accepts values that require inserttion of stars due to pass syntax checks or apply other optional rules that add stars simillarily fixing spaces does much the same although in that case the fixes are mainly for syntax issues. Try for example with <code class="clicksample">(x+1)(x-1)</code> or <code class="clicksample">2 x</code>.</p>
<table>
  <tr>
    <td>fix_stars/fix_spaces</td><td>Fix stars</td><td>Don't fix stars</td>
  </tr>
  <tr>
    <td>Fix spaces</td><td>[[input:ans1]][[validation:ans1]]</td><td>[[input:ans3]][[validation:ans3]]</td>
  </tr>
  <tr>
    <td>Don't fix spaces</td><td>[[input:ans2]][[validation:ans2]]</td><td>[[input:ans4]][[validation:ans4]]</td>
  </tr>
</table>

<h4>Basic elective rules for insertion of stars</h4>
<p>There are currently four distinct rules for splitting tokes on implied boundaries of variable, function and number identifiers. The rules do interact slightly, in this example we allow fixes.</p>
<p>The first one is split_prefixes_from_functions which is intended to deal with cases like <code class="clicksample">xsin(x)</code>.</p>
<p>The second one is split_number_letter_boundary which tends to assume that identifiers having numbers in them are somehow broken and will split them. <code class="clicksample">a1b2</code> shows the behaviour.</p>
<p>The third one is split_implied_variables which tries to detect cases where a token is used both as a function name and a variable name, and then splits the function call to multiplication e.g. <code class="clicksample">x(x+1)</code>.</p>
<p>The fourth one split_to_single_letter_variables starts with the assumption that there are no variable names longer than one character and simply splits existing ones down. It will protect some identifiers automatically, mainly the greek alphabets <code class="clicksample">thetapi</code>, <code class="clicksample">xyz</code>.</p>
<p>In default configuration the first three are active while the last one is not.</p>

<table>
  <tr>
    <td colspan="3">split_prefixes_from_functions</td>
  </tr>
  <tr>
    <td>&nbsp;</td><td colspan="3">split_number_letter_boundary</td>
  </tr>
  <tr>
    <td colspan="2">&nbsp;</td><td colspan="3">split_implied_variables</td>
  </tr>
  <tr>
    <td colspan="3">&nbsp;</td><td colspan="3">split_to_single_letter_variables</td>
  </tr>
  <tr>
    <td>on</td><td>off</td><td>off</td><td>off</td><td>[[input:ans5]]</td><td>[[validation:ans5]]</td>
  </tr>
  <tr>
    <td>on</td><td>off</td><td>off</td><td>on</td><td>[[input:ans6]]</td><td>[[validation:ans6]]</td>
  </tr>
  <tr>
    <td>on</td><td>off</td><td>on</td><td>off</td><td>[[input:ans7]]</td><td>[[validation:ans7]]</td>
  </tr>
  <tr>
    <td>on</td><td>off</td><td>on</td><td>on</td><td>[[input:ans8]]</td><td>[[validation:ans8]]</td>
  </tr>
  <tr>
    <td>on</td><td>on</td><td>off</td><td>off</td> <td>[[input:ans9]]</td><td>[[validation:ans9]]</td>
  </tr>
  <tr>
    <td>on</td><td>on</td><td>off</td><td>on</td><td>[[input:ans10]]</td><td>[[validation:ans10]]</td>
  </tr>
  <tr>
    <td>on</td><td>on</td><td>on</td><td>off</td><td>[[input:ans11]]</td><td>[[validation:ans11]]</td>
  </tr>
  <tr>
    <td>on</td><td>on</td><td>on</td><td>on</td><td>[[input:ans12]]</td><td>[[validation:ans12]]</td>
  </tr>
  <tr>
    <td>off</td><td>off</td><td>off</td><td>off</td><td>[[input:ans13]]</td><td>[[validation:ans13]]</td>
  </tr>
  <tr>
    <td>off</td><td>off</td><td>off</td><td>on</td><td>[[input:ans14]]</td><td>[[validation:ans14]]</td>
  </tr>
  <tr>
    <td>off</td><td>off</td><td>on</td><td>off</td><td>[[input:ans15]]</td><td>[[validation:ans15]]</td>
  </tr>
  <tr>
    <td>off</td><td>off</td><td>on</td><td>on</td><td>[[input:ans16]]</td><td>[[validation:ans16]]</td>
  </tr>
  <tr>
    <td>off</td><td>on</td><td>off</td><td>off</td><td>[[input:ans17]]</td><td>[[validation:ans17]]</td>
  </tr>
  <tr>
    <td>off</td><td>on</td><td>off</td><td>on</td><td>[[input:ans18]]</td><td>[[validation:ans18]]</td>
  </tr>
  <tr>
    <td>off</td><td>on</td><td>on</td><td>off</td><td>[[input:ans19]]</td><td>[[validation:ans19]]</td>
  </tr>
  <tr>
    <td>off</td><td>on</td><td>on</td><td>on</td><td>[[input:ans20]]</td><td>[[validation:ans20]]</td>
  </tr>
</table>

<h4>Forbidding of specific types of things</h4>
<p>It is normal to forbid floating-point numbers when dealing with exact things, but one can also forbid other things. There are also specific rules for functions of known or unknown nature, which one can either turn into multiplication operations or forbid.</p>

<p>Floating point numbers and strings are by default forbidden so thay are now allowed in this example. Some examples of interest are <code class="clicksample">0.333</code>, <code class="clicksample">"a string"</code>, <code class="clicksample">[a,l,i,s,t]</code>, <code class="clicksample">{a,s,e,t}</code>, <code class="clicksample">(1+2)*(3+4)</code>, and <code class="clicksample">f(x)+sin(x)</code></p>

<table>
  <tr>
    <td>Allow floats</td><td>[[input:ans21]]</td><td>[[validation:ans21]]</td>
  </tr>
  <tr>
    <td>Allow strings</td><td>[[input:ans22]]</td><td>[[validation:ans22]]</td>
  </tr>
  <tr>
    <td>Forbid lists</td><td>[[input:ans23]]</td><td>[[validation:ans23]]</td>
  </tr>
  <tr>
    <td>Forbid sets</td><td>[[input:ans24]]</td><td>[[validation:ans24]]</td>
  </tr>
  <tr>
    <td>Forbid groups</td><td>[[input:ans25]]</td><td>[[validation:ans25]]</td>
  </tr>
  <tr>
    <td>Split unknown functions</td><td>[[input:ans26]]</td><td>[[validation:ans26]]</td>
  </tr>
  <tr>
    <td>Split all functions</td><td>[[input:ans27]]</td><td>[[validation:ans27]]</td>
  </tr>
  <tr>
    <td>Forbid unknown functions</td><td>[[input:ans28]]</td><td>[[validation:ans28]]</td>
  </tr>
  <tr>
    <td>Forbid all functions</td><td>[[input:ans29]]</td><td>[[validation:ans29]]</td>
  </tr>
</table>

<h4>Require same type</h4>
<p>Spefically require that the type matches the teacher answers type. Note that the concept of the type here may be interesting, which is why require_same_type is not by default active.</p>

<table>
  <tr>
    <td>TA: <code class="clicksample">{#a=b#}</code></td>
    <td>[[input:ans30]]</td><td>[[validation:ans30]]</td>
  </tr>
  <tr>
    <td>TA: <code class="clicksample">{#{a,b,c}#}</code></td>
    <td>[[input:ans31]]</td><td>[[validation:ans31]]</td>
  </tr>
  <tr>
    <td>TA: <code class="clicksample">{#3/5#}</code></td>
    <td>[[input:ans32]]</td><td>[[validation:ans32]]</td>
  </tr>
  <tr>
    <td>TA: <code class="clicksample">a &lt;= b</code></td>
    <td>[[input:ans33]]</td><td>[[validation:ans33]]</td>
  </tr>
  <tr>
    <td>TA: <code class="clicksample">{#[a,b,c]#}</code></td>
    <td>[[input:ans34]]</td><td>[[validation:ans34]]</td>
  </tr>
</table>

<h4>Require lowest terms</h4>
<p>Check fractions in the expression and ensure that they are expressed fully simplified. Again require_lowest_terms is a setting not normally active.</p>

<p>Try with <code class="clicksample">2/4</code>, <code class="clicksample">2*x/2</code>, <code class="clicksample">1+2+27/9</code>: [[input:ans35]]</p>
[[validation:ans35]]

<h4>Align</h4>
<p>Presentation detail, one can force left/right align or leave it to the browser. The browser may decide things based on the user's locale. Currently, no direct connection to localisation features may have in the future. By default left to the browser, which is why this is here so that you can see which way your browser chooses.</p>
<table>
  <tr>
    <td>left</td><td>browser decides</td><td>right</td>
  </tr>
  <tr>
    <td>[[input:ans36]]</td><td>[[input:ans37]]</td><td>[[input:ans38]]</td>
  </tr>
  <tr>
    <td>[[validation:ans36]]</td><td>[[validation:ans37]]</td><td>[[validation:ans38]]</td>
  </tr>
</table>]]></text>
    </scenetext>
    <input name="ans" type="algebraic" validation-box="&quot;&quot;" must-verify="false" tans="&quot;0&quot;"/>
    <input name="ans1" type="algebraic" validation-box="&quot;ans1&quot;" fix-spaces="true" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans2" type="algebraic" validation-box="&quot;ans2&quot;" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans3" type="algebraic" validation-box="&quot;ans3&quot;" fix-spaces="true" tans="&quot;0&quot;"/>
    <input name="ans4" type="algebraic" validation-box="&quot;ans4&quot;" tans="&quot;0&quot;"/>
    <input name="ans5" type="algebraic" validation-box="&quot;ans5&quot;" split-number-letter-boundary="false" split-implied-variables="false" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans6" type="algebraic" validation-box="&quot;ans6&quot;" split-number-letter-boundary="false" split-implied-variables="false" split-to-single-letter-variables="true" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans7" type="algebraic" validation-box="&quot;ans7&quot;" split-number-letter-boundary="false" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans8" type="algebraic" validation-box="&quot;ans8&quot;" split-number-letter-boundary="false" split-to-single-letter-variables="true" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans9" type="algebraic" validation-box="&quot;ans9&quot;" split-implied-variables="false" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans10" type="algebraic" validation-box="&quot;ans10&quot;" split-implied-variables="false" split-to-single-letter-variables="true" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans11" type="algebraic" validation-box="&quot;ans11&quot;" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans12" type="algebraic" validation-box="&quot;ans12&quot;" split-to-single-letter-variables="true" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans13" type="algebraic" validation-box="&quot;ans13&quot;" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans14" type="algebraic" validation-box="&quot;ans14&quot;" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" split-to-single-letter-variables="true" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans15" type="algebraic" validation-box="&quot;ans15&quot;" split-number-letter-boundary="false" split-prefixes-from-functions="false" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans16" type="algebraic" validation-box="&quot;ans16&quot;" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-to-single-letter-variables="true" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans17" type="algebraic" validation-box="&quot;ans17&quot;" split-prefixes-from-functions="false" split-implied-variables="false" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans18" type="algebraic" validation-box="&quot;ans18&quot;" split-prefixes-from-functions="false" split-implied-variables="false" split-to-single-letter-variables="true" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans19" type="algebraic" validation-box="&quot;ans19&quot;" split-prefixes-from-functions="false" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans20" type="algebraic" validation-box="&quot;ans20&quot;" split-prefixes-from-functions="false" split-to-single-letter-variables="true" fix-stars="true" tans="&quot;0&quot;"/>
    <input name="ans21" type="algebraic" validation-box="&quot;ans21&quot;" forbid-floats="false" tans="&quot;0&quot;"/>
    <input name="ans22" type="algebraic" validation-box="&quot;ans22&quot;" forbid-strings="false" tans="&quot;0&quot;"/>
    <input name="ans23" type="algebraic" validation-box="&quot;ans23&quot;" forbid-lists="true" tans="&quot;0&quot;"/>
    <input name="ans24" type="algebraic" validation-box="&quot;ans24&quot;" forbid-sets="true" tans="&quot;0&quot;"/>
    <input name="ans25" type="algebraic" validation-box="&quot;ans25&quot;" forbid-groups="true" tans="&quot;0&quot;"/>
    <input name="ans26" type="algebraic" validation-box="&quot;ans26&quot;" forbid-functions="&quot;split_unknown_functions&quot;" tans="&quot;0&quot;"/>
    <input name="ans27" type="algebraic" validation-box="&quot;ans27&quot;" forbid-functions="&quot;split_all_functions&quot;" tans="&quot;0&quot;"/>
    <input name="ans28" type="algebraic" validation-box="&quot;ans28&quot;" forbid-functions="&quot;forbid_unknown_functions&quot;" tans="&quot;0&quot;"/>
    <input name="ans29" type="algebraic" validation-box="&quot;ans29&quot;" forbid-functions="&quot;forbid_all_functions&quot;" tans="&quot;0&quot;"/>
    <input name="ans30" type="algebraic" validation-box="&quot;ans30&quot;" require-same-type="true" tans="&quot;a=b&quot;"/>
    <input name="ans31" type="algebraic" validation-box="&quot;ans31&quot;" require-same-type="true" tans="&quot;{a,b,c}&quot;"/>
    <input name="ans32" type="algebraic" validation-box="&quot;ans32&quot;" require-same-type="true" tans="&quot;3\/5&quot;"/>
    <input name="ans33" type="algebraic" validation-box="&quot;ans33&quot;" require-same-type="true" tans="&quot;a&lt;=b&quot;"/>
    <input name="ans34" type="algebraic" validation-box="&quot;ans34&quot;" require-same-type="true" tans="&quot;[a,b,c]&quot;"/>
    <input name="ans35" type="algebraic" validation-box="&quot;ans35&quot;" require-lowest-terms="true" tans="&quot;0&quot;"/>
    <input name="ans36" type="algebraic" validation-box="&quot;ans36&quot;" input-align="&quot;left&quot;" tans="&quot;0&quot;"/>
    <input name="ans37" type="algebraic" validation-box="&quot;ans37&quot;" tans="&quot;0&quot;"/>
    <input name="ans38" type="algebraic" validation-box="&quot;ans38&quot;" input-align="&quot;right&quot;" tans="&quot;0&quot;"/>
    <vbox name="ans1" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans1@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans2" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans2@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans3" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans3@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans4" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans4#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans4#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans4#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans4@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans4]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans4]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans4]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans5" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans5#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans5#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans5#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans5@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans5]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans5]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans5]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans6" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans6#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans6#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans6#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans6@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans6]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans6]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans6]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans7" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans7#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans7#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans7#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans7@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans7]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans7]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans7]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans8" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans8#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans8#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans8#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans8@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans8]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans8]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans8]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans9" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans9#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans9#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans9#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans9@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans9]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans9]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans9]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans10" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans10#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans10#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans10#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans10@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans10]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans10]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans10]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans11" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans11#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans11#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans11#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans11@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans11]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans11]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans11]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans12" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans12#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans12#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans12#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans12@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans12]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans12]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans12]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans13" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans13#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans13#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans13#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans13@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans13]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans13]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans13]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans14" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans14#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans14#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans14#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans14@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans14]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans14]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans14]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans15" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans15#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans15#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans15#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans15@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans15]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans15]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans15]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans16" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans16#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans16#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans16#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans16@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans16]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans16]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans16]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans17" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans17#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans17#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans17#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans17@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans17]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans17]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans17]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans18" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans18#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans18#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans18#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans18@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans18]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans18]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans18]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans19" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans19#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans19#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans19#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans19@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans19]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans19]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans19]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans20" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans20#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans20#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans20#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans20@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans20]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans20]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans20]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans21" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans21#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans21#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans21#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans21@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans21]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans21]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans21]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans22" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans22#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans22#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans22#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans22@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans22]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans22]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans22]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans23" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans23#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans23#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans23#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans23@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans23]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans23]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans23]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans24" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans24#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans24#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans24#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans24@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans24]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans24]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans24]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans25" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans25#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans25#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans25#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans25@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans25]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans25]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans25]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans26" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans26#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans26#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans26#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans26@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans26]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans26]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans26]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans27" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans27#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans27#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans27#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans27@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans27]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans27]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans27]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans28" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans28#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans28#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans28#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans28@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans28]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans28]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans28]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans29" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans29#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans29#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans29#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans29@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans29]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans29]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans29]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans30" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans30#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans30#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans30#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans30@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans30]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans30]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans30]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans31" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans31#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans31#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans31#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans31@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans31]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans31]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans31]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans32" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans32#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans32#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans32#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans32@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans32]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans32]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans32]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans33" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans33#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans33#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans33#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans33@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans33]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans33]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans33]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans34" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans34#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans34#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans34#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans34@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans34]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans34]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans34]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans35" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans35#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans35#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans35#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans35@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans35]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans35]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans35]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans36" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans36#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans36#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans36#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans36@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans36]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans36]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans36]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans37" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans37#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans37#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans37#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans37@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans37]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans37]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans37]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans38" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans38#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans38#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans38#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans38@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans38]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans38]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans38]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
  </scene>
</stateful>  </question>

<!-- question: 835  -->
  <question type="stateful">
    <name>
      <text>TECH: Answer-tests in Stateful</text>
    </name>
    <questiontext format="html">
      <text>This question is a technical demonstrator and tester for the answer-tests present in Stateful. You may use it to browse and try the available tests and see if the declared unit-tests for the tests still work.

Note, that this demonstrator uses custom validation messages to show how one could call the same test outside PRTs, but those messages cannot include the feedback generated by the tests. Should you wish to see the feedback you will need to press the check button to see it.

Note 2, the 'no-units' option of inputs is used as this material contains both units and test cases that don't like units. As this material has units it means that all validation would by default expect units and give feedback about things like 'a' vs. 'A'.</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
<stateful statefulversion="2020040800" stackversion="2020040300" entryscene="entry" questionsimplify="1" assumepositive="0" assumereal="0" penalty="0.3333333" multiplicationsign="dot" sqrtsign="1" complexno="i" inversetrig="cos-1" matrixparens="[" parlength="-1" variants="{&quot;_set&quot;:0,&quot;A&quot;:[],&quot;B&quot;:[],&quot;C&quot;:[]}">
  <questionvariables>
<text></text>

  </questionvariables>
  <questionnote>
<text></text>

  </questionnote>
  <scene name="entry">
    <description>
<text>Initial scene for a Stateful-question, no question can exists without a scene.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3>Stateful answer-test demonstrator</h3>
<p>The actual tests have been separated to scenes due to the fact that this material also contains tests for those tests and collecting everything into a single scene would make things annoying to update. Please select (and then check) the test you wish to look into, you can return to this list and the test will be described in more detail in its own scene:</p>

[[input:tests]]

[[ if test="false"]]To keep that one warning quiet: [[feedback:select]] [[validation:tests]] [[/if]]]]></text>
    </scenetext>
    <input name="tests" type="mcq" mcq-options="[{&quot;value&quot;:&quot;\&quot;Diff\&quot;&quot;,&quot;label&quot;:&quot;&lt;h4&gt;Calculus&lt;\/h4&gt;\n&lt;p&gt;&lt;i&gt;Diff&lt;\/i&gt;-test checks if the answer is the derivate of something and gives related feedback if it is something else.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;Int\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Int&lt;\/i&gt;-test checks if the integral of something and will provide related feedback, can be configured to note the existence of integration constants.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;AlgEquiv\&quot;&quot;,&quot;label&quot;:&quot;&lt;h4&gt;Equality&lt;\/h4&gt;\n&lt;p&gt;&lt;i&gt;Algebraic-equivalence&lt;\/i&gt; the primary test\nusable for pretty much everything.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;\&quot;CasEqual\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;CAS-equality&lt;\/i&gt; slightly different \ntake on equality.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;},{&quot;value&quot;:&quot;\&quot;SubstEquiv\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Substitution-equivalence&lt;\/i&gt;, checks if simply swithing some variables the answer would be equal to the teachers answer.&lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;SameType\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Type-equivalence&lt;\/i&gt; tests if a list is a list or for example if something is an inequality, just checks if the object is of the same type, does not care about values. &lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;EqualComAss\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Commutative and associative equality&lt;\/i&gt; tests if the answers terms could be rearranged repecting commutativity and associativity so that the the expression would match the teachers answer. Best suitted for checking steps of work and skipping the simplification when checking.&lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;Sets\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Set-comparison&lt;\/i&gt; specific feedback about differrences of sets.&lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;LowestTerms\&quot;&quot;,&quot;label&quot;:&quot;&lt;h4&gt;Form&lt;\/h4&gt;&lt;p&gt;&lt;i&gt;Simplified fractions&lt;\/i&gt;-test checks if all the fractions in the answer are fully simplified and representted with the lowest possible terms.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;Expanded\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Expanded-form&lt;\/i&gt; tests if an expression has been fully expanded.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;FacForm\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Factored-form&lt;\/i&gt; tests if an expression has been fully factored.&lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;SingleFrac\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Single fraction-form&lt;\/i&gt; checks that the answer is equivalne and representted as a single fraction.&lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;PartFrac\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Partial-fraction-form&lt;\/i&gt; checks if the answer is equivalent and presentted as a partial-fraction decomposition.&lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;CompSquare\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Completed square-form&lt;\/i&gt; checks the form and equality.&lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;GT &amp; GTE\&quot;&quot;,&quot;label&quot;:&quot;&lt;h4&gt;Inequality&lt;\/h4&gt;&lt;p&gt;&lt;i&gt;Numerical larger than or equal tests&lt;\/i&gt; do what they say with equality or not.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;ATNumerical\&quot;&quot;,&quot;label&quot;:&quot;&lt;h4&gt;Numerical&lt;\/h4&gt;&lt;p&gt;&lt;i&gt;Absolute- and relative-tolerance numerical testing&lt;\/i&gt;&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;StrictSigFigs\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Strict significant-figures&lt;\/i&gt; a variant that enforces a stricter interpretation of significant-figures.&lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;NumSigFigs\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Significant-figures&lt;\/i&gt;\nnumerical value testing with representational requirements.\n&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;NumDecPlaces\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Decimal-places&lt;\/i&gt; should one wish to check that the answer has a given number of decimal places and is accurate to that level.&lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;DecimalPlacesWrong\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Missplaced decimal separator&lt;\/i&gt; should one wish to check if the answer is just multiplie by arbitrary power of ten, but still matches for a given number of most-significant digits.&lt;\/p&gt;&lt;b&gt;NOT YET PRESENT IN THIS TEST SET&lt;\/b&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;Strings\&quot;&quot;,&quot;label&quot;:&quot;&lt;h4&gt;Strings&lt;\/h4&gt;&lt;p&gt;&lt;i&gt;ATSRegExp&lt;\/i&gt;, &lt;i&gt;StringContains&lt;\/i&gt; and &lt;i&gt;StringContainsIC&lt;\/i&gt;\nfor when one needs to fall back to &lt;code&gt;\&quot;string\&quot;&lt;\/code&gt;-matching. Don't use these.\n&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;UnitsSigFigs\&quot;&quot;,&quot;label&quot;:&quot;&lt;h4&gt;Units&lt;\/h4&gt;&lt;p&gt;&lt;i&gt;Unit-conversion avare test with sig-figs checks.&lt;\/i&gt;&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;UnitsStrictSigFigs\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;&lt;i&gt;Unit-conversion forbidding test with sig-figs checks.&lt;\/i&gt;&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;ATUnitsFun\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;Absolute- and relative-tolerance tests with units. With or without unit conversions.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;}]" mcq-no-deselect="true" forbid-floats="false" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" tans="&quot;\&quot;AlgEquiv\&quot;&quot;"/>
    <prt name="select" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text><![CDATA[/* Note, that in this PRT one could just write the value directly
 * to SCENE_NEXT and be done with it, but as this sample material
 * is expected to be explored by users not necessary seeing why
 * that is not something one would want to do we intenttionally do 
 * not do so. Therefore we have this ugly list-like PRT instead of 
 * just one node and a line of code.
 *
 * Do not write to SCENE_NEXT before you "grok in fullness" what it 
 * means. Why it is possible yet still not recommended is something
 * beyond this note.
 */]]></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="tests" tans="&quot;AlgEquiv&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:AlgEquiv">
          <variables>
<text></text>

        </variables>
          <feedback>
<text>TODO</text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"AlgEquiv","condition":"true","inputs":{"tests":"\"AlgEquiv\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="NumSigFigs">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text>TODO</text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="NumSigFigs" test="AlgEquiv" sans="tests" tans="&quot;NumSigFigs&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:NumSigFigs">
          <variables>
<text></text>

        </variables>
          <feedback>
<text>TODO</text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"NumSigFigs","condition":"true","inputs":{"tests":"\"NumSigFigs\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="Strings">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text>TODO</text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Strings" test="AlgEquiv" sans="tests" tans="&quot;Strings&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:Strings">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Strings","condition":"true","inputs":{"tests":"\"Strings\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="CasEqual">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="CasEqual" test="AlgEquiv" sans="tests" tans="&quot;CasEqual&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:CasEqual">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"CasEqual","condition":"true","inputs":{"tests":"\"CasEqual\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="Diff">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Diff" test="AlgEquiv" sans="tests" tans="&quot;Diff&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:Diff">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Diff","condition":"true","inputs":{"tests":"\"Diff\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="Int">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Int" test="AlgEquiv" sans="tests" tans="&quot;Int&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:Int">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Int","condition":"true","inputs":{"tests":"\"Int\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="UnitsSigFigs">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="UnitsSigFigs" test="AlgEquiv" sans="tests" tans="&quot;UnitsSigFigs&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:UnitsSigFigs">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"UnitsSigFigs","condition":"true","inputs":{"tests":"\"UnitsSigFigs\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="ATNumerical">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="ATNumerical" test="AlgEquiv" sans="tests" tans="&quot;ATNumerical&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:ATNumerical">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"ATNumerical","condition":"true","inputs":{"tests":"\"ATNumerical\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="UnitsStrictSigFigs">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="UnitsStrictSigFigs" test="AlgEquiv" sans="tests" tans="&quot;UnitsStrictSigFigs&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:UnitsStrictSigFigs">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"UnitsStrictSigFigs","condition":"true","inputs":{"tests":"\"UnitsStrictSigFigs\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="ATUnitsFun">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="ATUnitsFun" test="AlgEquiv" sans="tests" tans="&quot;ATUnitsFun&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:ATUnitsFun">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"ATUnitsFun","condition":"true","inputs":{"tests":"\"ATUnitsFun\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="LowestTerms">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="LowestTerms" test="AlgEquiv" sans="tests" tans="&quot;LowestTerms&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:LowestTerms">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"LowestTerms","condition":"true","inputs":{"tests":"\"LowestTerms\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="GT &amp; GTE">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="GT &amp; GTE" test="AlgEquiv" sans="tests" tans="&quot;GT &amp; GTE&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:ATGT(E)">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"ATGT(E)","condition":"true","inputs":{"tests":"\"GT & GTE\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="Expanded">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Expanded" test="AlgEquiv" sans="tests" tans="&quot;Expanded&quot;" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:Expanded">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Expanded","condition":"true","inputs":{"tests":"\"Expanded\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="AlgEquiv">
    <description>
<text>All about ATAlgEquiv.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATAlgEquiv(sans,tans)</code></h3>
<p>The primary function of the algebraic-equivalence test is to check if one can simplify the difference of teachers and students answer to zero. In general this will work although special care must be taken if the answers contain trigonometric-functions, fractional-powers and/or logarithms, in those cases additional simplification steps may be necessary.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code> and <code>tans</code> and see what happens.</p>

<p><code>sans:</code>[[input:anss]], <code>tans:</code>[[input:anst]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:primary]]</p>

<h4>Options</h4>
<p>This test has no optios beyond the quiet-switch.</p>

<h4>Generated feedback</h4>
<p>This test will complain if the answers type differs from the expected and in cases where the answer has structure like lists, sets, and matrices it may specify which elements do not match. This kind of feedback may prove to be inconvenient so do remember the existence of the quiet-switch.</p>

<p>It is worth noting that the feedback can be quite specific when dealing with for example equalities so do check if this test already provides the feedback you need.</p>

<h4>Classification notes</h4>
<p>This test will provide plenty of notes about how the answer differs for later statistical analysis, here are some examples, click the samples to see them in action.</p>

<table>
<thead>
<tr><th>Token</th><th>General description</th><th>Sample(s)</th></tr>
</thead>
<tbody>
<tr><td><b>ATList_wronglen</b></td><td>When comparing lists differing length is specifically noted.</td><td><code class="sample" data-tans="[1]" data-sans="[1,2,3]">[1,2,3] != [1]</code></td></tr>
<tr><td><b>ATList_wrongentries</b></td><td>When comparing lists of the same length the differing elements are noted.</td><td><code class="sample" data-tans="[1,4,5]" data-sans="[1,2,3]">[1,2,3] != [1,4,5]</code></td></tr>
<tr><td><b>ATSet_wrongsz</b></td><td>When comparing set differing size is specifically noted.</td><td><code class="sample" data-tans="{1}" data-sans="{1,2,3}">{1,2,3} != {1}</code></td></tr>
<tr><td><b>ATSet_wrongentries</b></td><td>When comparing set of the same size the differing elements are noted.</td><td><code class="sample" data-tans="{1,4,5}" data-sans="{1,2,3}">{1,2,3} != {1,4,5}</code></td></tr>
<tr><td><b>ATAlgEquiv_WrongCase</b></td><td>When the answers have case-differences in variables.</td><td><code class="sample" data-tans="x" data-sans="X">X != x</code></td></tr>
<tr><td><b>ATAlgEquiv_SA_not_list</b></td><td>When expecting a list but receiving something else.</td><td><code class="sample" data-tans="[1]" data-sans="1">1 != [1]</code></td></tr>
<tr><td><b>ATAlgEquiv_SA_not_set</b></td><td>When expecting a set but receiving something else.</td><td><code class="sample" data-tans="{1}" data-sans="1">1 != {1}</code></td></tr>


</tbody>
</table>
<p>TODO: all other notes...</p>


[[jsxgraph input-ref-anst='anst' input-ref-anss='anss' height='1px']]
/* JSXGraph blocks allow direct JavaScript access that can be used
 * to do many things, just set the size of the div reserved for the 
 * graph that you are not actually building. Or hide it.
 */

var samples = $('code.sample');
samples.on('click', function(e) {
  // Not .data() as these may look like JSON.
  var t = $(e.target).attr('data-tans');
  var s = $(e.target).attr('data-sans');
  var sans = $('#' + $.escapeSelector(anss));
  var tans = $('#' + $.escapeSelector(anst));             
  sans.val(s);
  tans.val(t);
  sans.trigger('change');
  tans.trigger('change');
  sans.trigger('input');
  tans.trigger('input');
});
[[/jsxgraph]]
<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="algebraic" guidance-label="&quot;Students answer&quot;" validation-box="&quot;val&quot;" forbid-floats="false" forbid-strings="false" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" fix-spaces="true" fix-stars="true" no-units="true" tans="&quot;1&quot;"/>
    <input name="anst" type="algebraic" guidance-label="&quot;Teachers answer&quot;" validation-box="&quot;val&quot;" forbid-floats="false" forbid-strings="false" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" fix-spaces="true" fix-stars="true" no-units="true" tans="&quot;1&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;" guidance-label="&quot;back to the test selection&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATAlgEquiv({#anss#},{#anst#})&lt;\/code&gt;&lt;\/p&gt;\n\n[[ if test=\&quot;%_valid_anss and %_valid_anst\&quot; ]]\n[[ define tr=\&quot;ATAlgEquiv(anss,anst)\&quot;\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="primary" value="1.0000000" firstnodename="The test" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="The test" test="AlgEquiv" sans="anss" tans="anst" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1 = 1","condition":"true","inputs":{"anss":"1","anst":"1"}},{"name":"[1] = [1]","condition":"true","inputs":{"anss":"[1]","anst":"[1]"}},{"name":"1=x =  x=1","condition":"true","inputs":{"anss":"1=x","anst":"x=1"}},{"name":"x<2 = 2>x","condition":"true","inputs":{"anss":"x<2","anst":"2>x"}},{"name":"(1+x)*(1-x) = 1-x^2 ","condition":"true","inputs":{"anss":"(1+x)*(1-x)","anst":"1-x^2"}},{"name":"cos(x+y) = cos(x)*cos(y)-sin(x)*sin(y)","condition":"true","inputs":{"anss":"cos(x+y)","anst":"cos(x)*cos(y)-sin(x)*sin(y)"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1 != 2","condition":"true","inputs":{"anss":"1","anst":"2"}},{"name":"[2] != [1]","condition":"true","inputs":{"anss":"[2]","anst":"[1]"}},{"name":"x=2 != 1=x","condition":"true","inputs":{"anss":"x=2","anst":"1=x"}},{"name":"x<2 != x<3","condition":"true","inputs":{"anss":"x<2","anst":"x<3"}},{"name":"1-x^2 != x^2+1","condition":"true","inputs":{"anss":"1-x^2","anst":"1+x^2"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="NumSigFigs">
    <description>
<text>All about NumSigFigs.</text>

    </description>
    <scenevariables>
<text><![CDATA[foo(a,b,c):=ATNumSigFigs_CASSigFigsWrapper(a,b,c,stackmap_get(_INPUT_STRING,"anss"));
validoptions(opts):=ev(
	if integerp(opts) then (
    	if opts > 0 then true else false
    ) else if listp(opts) then (
    	if length(opts) # 2 then false else (
        	if not apply("and", map(integerp, opts)) then false else (
            	if opts[1] < 1 then false 
                else if opts[2] < -1 then false,
                true
            )
        )
    ) else false
,simp);

/* Provide variables */
four:4;
three:3;
two:2;]]></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATNumSigFigs(sans,tans,options)</code></h3>
<p>A test for checking raw representation of a raw input-value. Only works with <code>sans</code> being a direct reference to an input. This test focuses on checking so called significant-figures. In general one can use this test to just check the existence on significant-figures or at the same time require that sufficient number of them equal to the expected value.</p>

<p>The base-test does not use the strict significant-figures rules i.e. for this <code>100</code> has three significant-figures where for strict checks it would have less. If you need to test for the strict definition try the strict variant.</p>

<p>The answer is expected to be numerical, so in this example the <code>sans</code>-input is a numerical-input. It is not recommended to use more complex input values here.</p>

<p>Note that due to the direct connection to the raw input-value required by this test means that direct calling of this test is not something one can easily do. However, exploring the logic behind the validation message in this question may give a hint on how to do it.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code>, <code>tans</code>, and <code>options</code> and see what happens. Note, for testing purposes the session has the following variables <code>four:4;three:3;two:2</code>, should you want to test certain behaviour.</p>

<p><code>sans:</code>[[input:anss]], <code>tans:</code>[[input:anst]], <code>options:</code>[[input:ansoptions]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:primary]]</p>

<h4>Options</h4>
<p>This test relies heavily on options. One will need to define either one integer valued option or a list of two integers. The first case is equivalent of giving a list with two equal elements so lets focus on the list form as it is the one that matters:</p>
<ol>
<li>The first element (lets call it N) of the list describes how many significant-figures need to be present in the answer. In general one requires an exactly N significant-figures, should one need to allow more to be present then setting the second element to <code>-1</code> will make the test allow N or more. However, in that case all those N+ digits must be correct, to deal with that try setting the teachers asnwer to be the students answer.</li>
<li>The second element (lets call it M) defines how many of the digits must match the teachers answer, typically one sets <code>M = N - 1</code> to allow some rounding errors in the last digit. Naturally, <code>M &lte; N</code> and both of them are integers.</li>
</ol>

<h4>Generated feedback</h4>
<p>The test will give feedback about the number of digits and note about small or large accuracy issues. Depending on your use case you may wish to silence this test and construct your own feedback, using suitable combinations of this test with different options to identify the cases that matter to you.</p>

<h4>Classification notes</h4>
<p>This test will provide plenty of notes about how the answer differs for later statistical analysis, here are some examples, click the samples to see them in action.</p>

<table>
<thead>
<tr><th>Token</th><th>General description</th><th>Sample(s)</th></tr>
</thead>
<tbody>
<tr><td><b>ATNumSigFigs_WrongDigits</b></td><td>Wrong number of digits.</td><td><code class="sample" data-sans="0" data-tans="0" data-options="3">0 != 0; 3</code></td></tr>
<tr><td><b>ATNumSigFigs_Inaccurate</b></td><td>Slightly inaccurate.</td><td><code class="sample" data-sans="10" data-tans="11" data-options="2">10 != 11; 2</code></td></tr>
<tr><td><b>ATNumSigFigs_VeryInaccurate</b></td><td>Very inaccurate.</td><td><code class="sample" data-sans="100" data-tans="11" data-options="2">100 != 11; 2</code></td></tr>
<tr><td><b>ATNumSigFigs_WithinRange</b></td><td>Not quite "strict" significant-figures, but still accepted.</td><td><code class="sample" data-sans="10" data-tans="10" data-options="2">10 != 10; 2</code></td></tr>
<tr><td><b>ATNumSigFigs_WrongSign</b></td><td>Sign error. Note may trigger if either value is zero.</td><td><code class="sample" data-sans="-11" data-tans="11" data-options="2">-11 != 11; 2</code></td></tr>


</tbody>
</table>


[[jsxgraph input-ref-anst='anst' input-ref-anss='anss' input-ref-ansoptions='ansoptions'  height='1px']]
/* JSXGraph blocks allow direct JavaScript access that can be used
 * to do many things, just set the size of the div reserved for the 
 * graph that you are not actually building. Or hide it.
 */

var samples = $('code.sample');
samples.on('click', function(e) {
  // Not .data() as these may look like JSON.
  var t = $(e.target).attr('data-tans');
  var s = $(e.target).attr('data-sans');
  var o = $(e.target).attr('data-options');
  var sans = $('#' + $.escapeSelector(anss));
  var tans = $('#' + $.escapeSelector(anst));             
  var options = $('#' + $.escapeSelector(ansoptions));
  sans.val(s);
  tans.val(t);
  options.val(o);
  sans.trigger('change');
  tans.trigger('change');
  options.trigger('change');
  sans.trigger('input');
  tans.trigger('input');
  options.trigger('input');
});
[[/jsxgraph]]

<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="numerical" guidance-label="&quot;Students answer&quot;" validation-box="&quot;val&quot;" tans="&quot;1&quot;"/>
    <input name="anst" type="algebraic" guidance-label="&quot;Teachers answer&quot;" validation-box="&quot;val&quot;" forbid-floats="false" forbid-strings="false" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" fix-spaces="true" fix-stars="true" no-units="true" tans="&quot;1&quot;"/>
    <input name="ansoptions" type="algebraic" guidance-label="&quot;Test options&quot;" allow-words="&quot;four,three,two&quot;" validation-box="&quot;val&quot;" forbid-floats="false" forbid-strings="false" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" fix-spaces="true" fix-stars="true" no-units="true" tans="&quot;[3,2]&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;" guidance-label="&quot;back to the test selection&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATNumSigFigs({#%_actual_anss#},{#anst#},{#ansoptions#})&lt;\/code&gt;. However, that would not give the full feedback this test generates.&lt;\/p&gt;\n\n[[ if test=\&quot;%_valid_anss and %_valid_anst and %_valid_ansoptions and validoptions(ansoptions)\&quot; ]]\n[[ define tr='foo(%_actual_anss,%_actual_anst,ansoptions)'\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="NumSigFigs" value="1.0000000" firstnodename="Integer" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="The test" test="NumSigFigs" sans="anss" tans="anst" options="ansoptions" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"3-figs  0.000 = 0; 3","condition":"true","inputs":{"anss":"dispdp(0,3)","anst":"0","ansoptions":"3"}},{"name":"Just 3-digs 0.123 = 0; [3,0]","condition":"true","inputs":{"anss":"dispdp(0.123,3)","anst":"0","ansoptions":"[3,0]"}},{"name":"Var-ref 0.1234 = 0.123; [four, four-1]","condition":"true","inputs":{"anss":"dispdp(0.1234,4)","anst":"0.123","ansoptions":"RAW:[four, four-1]"}},{"name":"Excessive accuracy 1.10000 = 1.1; [3,-1]","condition":"true","inputs":{"anss":"RAW:1.10000","anst":"1.1","ansoptions":"[3,-1]"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"3-figs 0.001 != 0; 3","condition":"true","inputs":{"anss":"dispdp(0.001,3)","anst":"0","ansoptions":"3"}},{"name":"Just 3-digs 0.12 != 0; [3,0]","condition":"true","inputs":{"anss":"dispdp(0.12,2)","anst":"0","ansoptions":"[3,0]"}},{"name":"Var-ref 0.12345 != 0; four","condition":"true","inputs":{"anss":"0.12345","anst":"0","ansoptions":"RAW:four"}},{"name":"Excessive and wrong 1.10001 != 1; [3,-1]","condition":"true","inputs":{"anss":"dispdp(1.10001,5)","anst":"1.1","ansoptions":"[3,-1]"}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="Integer" test="AlgEquiv" sans="integerp(ansoptions)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="Large enough">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="List">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Large enough" test="AlgEquiv" sans="is(ansoptions&gt;0)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="The test">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The option value msut be larger</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="List" test="AlgEquiv" sans="listp(ansoptions)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="Two element list">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The option must either have an integer value or a list value.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Two element list" test="AlgEquiv" sans="length(ansoptions)" tans="2" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="First element positiveinteger">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The list must have exactly two elements.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="First element positiveinteger" test="AlgEquiv" sans="integerp(ansoptions[1]) and is(ansoptions[1]&gt;0)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="Second element integer">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The first element of the options list must be an positive integer.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Second element integer" test="AlgEquiv" sans="ev(integerp(ansoptions[2]) and is((ansoptions[2] + 2) &gt; 0),simp)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="The test">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The second element of the options list must be an integer.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="Strings">
    <description>
<text>Tests acting on strings.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATSRegExp(sans,tans)</code></h3>
<p>This test tries to match a regular-expression patern (<code>tans</code>) to the input string (<code>sans</code>), using the maxima library <code>sregex</code>. As string processing is not a core STACK nor Stateful feature <b>these tests are not recommended</b> to be used but they exists for those cases where you absolutely must use them.</p>
<p>These tests only work with <code>"string"</code>-values, so do not give them values that are not strings or direct references to inputs in which case the inputs raw value will be used.</p>
<h4>What about <code>StringContains</code> and <code>StringContainsIC</code>?</h4>
<p>There only exists a single test <code>ATSRegExp</code>, the tests <code>StringContains</code> and <code>StringContainsIC</code> are just convenience wrappers for it. The latter tests simply test if a given string is a substring of the answer with or without case-sensitivity, the convenience they provide is that they will automatically escape whatever regular-expression pattern related characters the string contains, thus avoiding the risk of failing to note such.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code> and <code>tans</code> and see what happens. Note that for your conveninece the inputs here are string-type inputs and you will not need to escape the values like normal Maxima-strings nor do you need to quote them.</p>

<h5><code>ATSRegExp</code></h5>
<p><code>sans:</code>[[input:anss]], <code>tans:</code>[[input:anst]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:sregexp]]</p>

<h5><code>StringContains</code> and <code>StringContainsIC</code></h5>
<p><code>sans:</code>[[input:anss2]], <code>tans:</code>[[input:anst2]]</p>
<p>[[validation:val2]]</p>
<p>[[feedback:contains]]</p>
<p>[[feedback:containsic]]</p>



<h4>Options</h4>
<p>These tests have no optios beyond the quiet-switch, and even that does nothing.</p>

<h4>Generated feedback</h4>
<p>These tests do not generate feedback.</p>

<h4>Classification notes</h4>
<p>The tests will return a note where the match result from the internal <code>regex_match()</code>-call is present, one may use that for something. Especially, if the pattern contains capture-groups, which will then be present in the note.</p>





<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="string" validation-box="&quot;val&quot;" tans="&quot;\&quot;foo\&quot;&quot;"/>
    <input name="anst" type="string" validation-box="&quot;val&quot;" tans="&quot;\&quot;foo\&quot;&quot;"/>
    <input name="anss2" type="string" validation-box="&quot;val2&quot;" tans="&quot;\&quot;foo\&quot;&quot;"/>
    <input name="anst2" type="string" validation-box="&quot;val2&quot;" tans="&quot;\&quot;foo\&quot;&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;" guidance-label="&quot;back to the test selection&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATSRegExp({#%_actual_anss#},{#%_actual_anst#})&lt;\/code&gt;&lt;\/p&gt;\n\n[[ if test=\&quot;%_valid_anss and %_valid_anst\&quot; ]]\n[[ define tr=\&quot;ATSRegExp(%_actual_anss,%_actual_anst)\&quot;\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <vbox name="val2" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATSRegExp({#%_actual_anss2#},{#string_to_regex(%_actual_anst2)#})&lt;\/code&gt; or &lt;code&gt;ATSRegExp({#%_actual_anss2#},{#sconcat(\&quot;(?i:\&quot;,string_to_regex(%_actual_anst2),\&quot;)\&quot;)#})&lt;\/code&gt;&lt;\/p&gt;\n\n&lt;h4&gt;&lt;code&gt;StringContains&lt;\/code&gt;&lt;\/h4&gt;\n[[ if test=\&quot;%_valid_anss2 and %_valid_anst2\&quot; ]]\n[[ define tr=\&quot;ATSRegExp(%_actual_anss2,ev(string_to_regex(%_actual_anst2),simp))\&quot;\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]\n\n&lt;h4&gt;&lt;code&gt;StringContainsIC&lt;\/code&gt;&lt;\/h4&gt;\n[[ if test=\&quot;%_valid_anss2 and %_valid_anst2\&quot; ]]\n[[ define tr='ATSRegExp(%_actual_anss2,ev(sconcat(\&quot;(?i:\&quot;,string_to_regex(%_actual_anst2),\&quot;)\&quot;),simp))'\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="contains" value="1.0000000" firstnodename="Root node" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="StringContains" sans="anss2" tans="anst2" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>StringContains: PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Contains 1","condition":"true","inputs":{"anss2":"\"foo bar baz\"","anst2":"\"bar\"","anss":"","anst":""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>StringContains: FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Contains 2","condition":"true","inputs":{"anss2":"\"foo bar baz\"","anst2":"\"BAR\"","anss":"","anst":""}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="containsic" value="1.0000000" firstnodename="Root node" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="StringContainsCI" sans="anss2" tans="anst2" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>StringContainsIC: PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Contains 1","condition":"true","inputs":{"anss2":"\"foo Bar BAZ\"","anst2":"\"baz\"","anss":"","anst":""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>StringContainsIC: FAIL</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="sregexp" value="1.0000000" firstnodename="Root node" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="StringRegExp" sans="anss" tans="anst" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Anchor 1","condition":"true","inputs":{"anss":"\"foo\"","anst":"\"^foo\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Anchor 2","condition":"true","inputs":{"anss":"\" foo\"","anst":"\"^foo\""}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="CasEqual">
    <description>
<text>All about ATCasEqual</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATCasEqual(sans,tans)</code></h3>
<p>The CAS-equality test is a bit odd creature as it essenttially tests if the expressions have the same structure without any simplification. You can use it distinguish between <code>1+1</code> and <code>2</code> but be very careful as for it even <code>x^(1/2)</code> and <code>sqrt(x)</code> are different.</p>
<p>In most cases it is likely that you will instead want to use <code>ATEqualComAss</code> to allow some permutation of terms in the received expression as for <code>ATCasEqual</code> <code>1+2</code> is not equal to <code>2+1</code> but for <code>ATEqualComAss</code> it is.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code> and <code>tans</code> and see what happens.</p>

<p><code>sans:</code>[[input:anss]], <code>tans:</code>[[input:anst]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:primary]]</p>

<h4>Options</h4>
<p>This test has no optios beyond the quiet-switch.</p>

<h4>Generated feedback</h4>
<p>The test does not generate any own feedback but it will let some through from <code>ATAlgEquiv</code> as it will try that to classify cases where CAS-equality is not true.</p>

<h4>Classification notes</h4>
<p>The notes are rather sparse, but follow the logic of the feedback and will include the notes from <code>ATAlgEquiv</code> if the test does not match.</p>
<p>Expect to see <code>ATCASEqual_true</code> for cases where the tess passes and <code>ATCASEqual_false</code> for cases where <code>ATAlgEquiv</code> does not provide sensible notes. If <code>ATAlgEquiv</code> passes but this does not then <code>ATCASEqual (AlgEquiv-true)</code> is to be expected, otherwise it will appen the notes coming from <code>ATAlgEquiv</code> to <code>ATCASEqual </code>.</p>


<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="algebraic" validation-box="&quot;val&quot;" no-units="true" tans="&quot;1&quot;"/>
    <input name="anst" type="algebraic" validation-box="&quot;val&quot;" no-units="true" tans="&quot;1&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;" guidance-label="&quot;back to the test selection&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATCasEqual({#anss#},{#anst#})&lt;\/code&gt;&lt;\/p&gt;\n\n[[ if test=\&quot;%_valid_anss and %_valid_anst\&quot; ]]\n[[ define tr=\&quot;ATCasEqual(anss,anst)\&quot;\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="primary" value="1.0000000" firstnodename="The test" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="The test" test="CasEqual" sans="anss" tans="anst" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Direct match 1","condition":"true","inputs":{"anss":"1+2","anst":"1+2"}},{"name":"Subscripts","condition":"true","inputs":{"anss":"rho*z*V\/(4*pi*epsilon[0]*(R^2+z^2)^(3\/2))","anst":"rho*z*V\/(4*pi*epsilon[0]*(R^2+z^2)^(3\/2))"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Not ComAss 1","condition":"true","inputs":{"anss":"1+2","anst":"2+1"}},{"name":"No simp","condition":"true","inputs":{"anss":"2\/4","anst":"1\/2"}},{"name":"Basic trig 1","condition":"true","inputs":{"anss":"cos(x)","anst":"cos(-x)"}},{"name":"Basic trig 2","condition":"true","inputs":{"anss":"cos(x)^2+sin(x)^2","anst":"1"}},{"name":"No simp 2","condition":"true","inputs":{"anss":"x+x","anst":"2*x"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="Diff">
    <description>
<text>ATDiff</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATDiff(sans,tans,option)</code></h3>
<p>The differentiation-test just checks the equality of two statements, and should they differ we then check for more things. The primary feature is to check for the possibility of the student having integrated instead of differentiating and to give specific feedback should that happen. <i>In reality the more interesting calculus test is the integration-test but one can't always integrate.</i></p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code>, <code>tans</code> and <code>option</code> and see what happens.</p>

<p><code>sans:</code>[[input:anss]], <code>tans:</code>[[input:anst]] <code>option:</code>[[input:anso]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:primary]]</p>

<h4>Options</h4>
<p>The mandatory option in this test describes which variable was derived. That teachers answer is the result of that differenttiation. One can naturally quiet this test if one so wishes.</p>

<h4>Generated feedback</h4>
<p>There will be specific feedback if the student integrates. Also answering with an equation instead of an expression will be noted.</p>

<h4>Classification notes</h4>
<p>There are some notes that will be generated:</p>
<table>
<tr><td><code>ATDiff_true</code></td><td>When the test passes</td></tr>
<tr><td><code>ATDiff_int</code></td><td>When the student integrated instead</td></tr>
<tr><td><code>ATDiff_SA_not_expression</code></td><td>For wrong type of an answer</td></tr>
<tr><td><code>ATDiff_var_SB_notSA</code></td><td>If the answer matches but somehow has the wrong variable</td></tr>
<tr><td><code>ATDiff_var_notSASB_SAnceSB</code></td><td>When answer has some other variables and does not match at all</td></tr>

</table>


<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="algebraic" validation-box="&quot;val&quot;" forbid-floats="false" no-units="true" tans="&quot;1&quot;"/>
    <input name="anst" type="algebraic" validation-box="&quot;val&quot;" forbid-floats="false" no-units="true" tans="&quot;1&quot;"/>
    <input name="anso" type="algebraic" validation-box="&quot;val&quot;" no-units="true" tans="&quot;x&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;" guidance-label="&quot;back to the test selection&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATDiff({#anss#},{#anst#},{#anso#})&lt;\/code&gt;&lt;\/p&gt;\n\n[[ if test=\&quot;%_valid_anss and %_valid_anst and %_valid_anso and symbolp(anso)\&quot; ]]\n[[ define tr=\&quot;ATDiff(anss,anst,anso)\&quot;\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="primary" value="1.0000000" firstnodename="Root node" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="Diff" sans="anss" tans="anst" options="anso" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Basic 1","condition":"true","inputs":{"anss":"x^2","anst":"x^2","anso":"x"}},{"name":"Big 1","condition":"true","inputs":{"anss":"6000*(x-a)^5999","anst":"6000*(x-a)^5999","anso":"x"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Basic 2","condition":"true","inputs":{"anss":"x^2+1","anst":"x^2","anso":"x"}},{"name":"Big 2","condition":"true","inputs":{"anss":"5999*(x-a)^5999","anst":"6000*(x-a)^5999","anso":"x"}},{"name":"Int 1","condition":"true","inputs":{"anss":"x^4\/4","anst":"3*x^2","anso":"x"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="Int">
    <description>
<text>ATInt</text>

    </description>
    <scenevariables>
<text>check_opt(opt):=block([],
 if symbolp(opt) then return(true),
 if listp(opt) then (
  if not symbolp(opt[1]) then return(false)
 ),
 return(false)
);</text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATInt(sans,tans,options)</code></h3>
<p>The integration-test does much more than the differentiation-test, it deals with the possibility of constant of integration beign freely chosen by the student and can be made to accept or comment answers that have no constant of integration.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code>, <code>tans</code> and <code>options</code> and see what happens.</p>

<p><code>sans:</code>[[input:anss]], <code>tans:</code>[[input:anst]] <code>options:</code>[[input:anso]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:primary]]</p>

<h4>Options</h4>
<p>Should your integrated teachers-answer be of a form that the test can esily derivate back to a sensible representation for us in its feedback and you wish to require that an integration-constant is present in the answer it is enough to just give the variable that was integrated on. Otrherwise, the options will need to be given as a list where that variable is the first element, the other elements may contain the original form of the expression that was integrated, and the keyword <code>NOCONST</code> which will then allow the answer to be accepted even without a constant.</p>


<h4>Generated feedback</h4>
<p>This test generates large amoutns of feedback. TODO: examples</p>

<h4>Classification notes</h4>
<p>There are some notes that will be generated:</p>
<table>
<tr><td><code>ATInt_true</code></td><td>When the test passes</td></tr>
<tr><td><code>ATInt_const</code></td><td>If there is no constant present in the answer</td></tr>
<tr><td><code>ATInt_const_int</code></td><td>There is no constant but there is something numerical extra instead.</td></tr>
<tr><td><code>ATInt_weirdconst</code></td><td>The constant is nto a singular thing added to the expression or may be in parts</td></tr>
<tr><td><code>ATInt_generic</code></td><td>When the answer does not match but there is no obvious reason</td></tr>
<tr><td><code>ATInt_var_SB_notSA</code></td><td>When the expression could match but the variable is wrong</td></tr>
<tr><td><code>ATInt_diff</code></td><td>The case of differenttiation.</td></tr>
<tr><td><code>ATInt_true</code></td><td>When the test passes</td></tr>


</table>


<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="algebraic" validation-box="&quot;val&quot;" no-units="true" tans="&quot;x+c&quot;"/>
    <input name="anst" type="algebraic" validation-box="&quot;val&quot;" no-units="true" tans="&quot;1&quot;"/>
    <input name="anso" type="algebraic" validation-box="&quot;val&quot;" no-units="true" tans="&quot;x&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;" guidance-label="&quot;back to the test selection&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATInt({#anss#},{#anst#},{#anso#})&lt;\/code&gt;&lt;\/p&gt;\n\n[[ if test=\&quot;%_valid_anss and %_valid_anst and %_valid_anso and check_opt(anso)\&quot; ]]\n[[ define tr=\&quot;ATInt(anss,anst,anso)\&quot;\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="primary" value="1.0000000" firstnodename="Root node" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="Int" sans="anss" tans="anst" options="anso" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Basic 1","condition":"true","inputs":{"anss":"x^3\/3+c","anst":"x^3\/3","anso":"x"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Basic 2 requries const","condition":"true","inputs":{"anss":"x^3\/3","anst":"x^3\/3","anso":"x"}},{"name":"Basic 3 requires non integer const","condition":"true","inputs":{"anss":"x^3\/3+1","anst":"x^3\/3","anso":"x"}},{"name":"Basic 4 multiple const","condition":"true","inputs":{"anss":"x^3\/3+c+k","anst":"x^3\/3","anso":"x"}},{"name":"Basic 5 variable switch","condition":"true","inputs":{"anss":"X^3\/3+c","anst":"x^3\/3","anso":"x"}},{"name":"Basic 6 diff & big","condition":"true","inputs":{"anss":"6000*(x-a)^5999","anst":"(x-a)^6001\/6001","anso":"x"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="UnitsSigFigs">
    <description>
<text>All about UnitsSigFigs.</text>

    </description>
    <scenevariables>
<text><![CDATA[foo(a,b,c):=ATUnitsSigFigs_CASSigFigsWrapper(a,b,c,stackmap_get(_INPUT_STRING,"anss"),false);
validoptions(opts):=ev(
	if integerp(opts) then (
    	if opts > 0 then true else false
    ) else if listp(opts) then (
    	if length(opts) # 2 then false else (
        	if not apply("and", map(integerp, opts)) then false else (
            	if opts[1] < 1 then false 
                else if opts[2] < -1 then false,
                true
            )
        )
    ) else false
,simp);

/* Provide variables */
four:4;
three:3;
two:2;]]></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATUnitsSigFigs(sans,tans,options)</code></h3>
<p>A test for checking raw representation of a raw input-value. Only works with <code>sans</code> being a direct reference to an input. This test focuses on checking so called significant-figures. In general one can use this test to just check the existence on significant-figures or at the same time require that sufficient number of them equal to the expected value.</p>

<p>This is essenttially the same test as the <code>ATNumSigFigs</code> however this test includes logic for convertting units and allows the student to use for example milli-meters when the teachers answer is in centi-meters. There is a "strict" variant of this test where the units need to match.</p>

<p>The base-test does not use the strict significant-figures rules i.e. for this <code>100</code> has three significant-figures where for strict checks it would have less. There currently does not exist a strict significan-figures test for units.</p>

<p>The answer is expected to be a number followed by the unit, so in this example the <code>sans</code>-input is a units-input. It is not recommended to use more complex input values here.</p>

<p>Note that due to the direct connection to the raw input-value required by this test means that direct calling of this test is not something one can easily do. However, exploring the logic behind the validation message in this question may give a hint on how to do it.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code>, <code>tans</code>, and <code>options</code> and see what happens. Note, for testing purposes the session has the following variables <code>four:4;three:3;two:2</code>, should you want to test certain behaviour.</p>

<p><code>sans:</code>[[input:anss]], <code>tans:</code>[[input:anst]], <code>options:</code>[[input:ansoptions]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:UnitsSigFigs]]</p>

<h4>Options</h4>
<p>This test relies heavily on options. One will need to define either one integer valued option or a list of two integers. The first case is equivalent of giving a list with two equal elements so lets focus on the list form as it is the one that matters:</p>
<ol>
<li>The first element (lets call it N) of the list describes how many significant-figures need to be present in the answer. In general one requires an exactly N significant-figures, should one need to allow more to be present then setting the second element to <code>-1</code> will make the test allow N or more. However, in that case all those N+ digits must be correct, to deal with that try setting the teachers asnwer to be the students answer.</li>
<li>The second element (lets call it M) defines how many of the digits must match the teachers answer, typically one sets <code>M = N - 1</code> to allow some rounding errors in the last digit. Naturally, <code>M &lte; N</code> and both of them are integers.</li>
</ol>

<h4>Generated feedback</h4>
<p>The test will give feedback about the number of digits and note about small or large accuracy issues. Depending on your use case you may wish to silence this test and construct your own feedback, using suitable combinations of this test with different options to identify the cases that matter to you. The feedback will additionally note issues with wrong units.</p>

<h4>Classification notes</h4>
<p>This test will provide plenty of notes about how the answer differs for later statistical analysis, here are some examples, click the samples to see them in action. Most notes are inherited from the underlying <code>ATNumSigFigs.</code>.</p>

<table>
<thead>
<tr><th>Token</th><th>General description</th><th>Sample(s)</th></tr>
</thead>
<tbody>
<tr><td><b>ATNumSigFigs_WrongDigits</b></td><td>Wrong number of digits.</td><td><code class="sample" data-sans="0*m" data-tans="0*m" data-options="3">0m != 0m; 3</code></td></tr>
<tr><td><b>ATNumSigFigs_Inaccurate</b></td><td>Slightly inaccurate.</td><td><code class="sample" data-sans="10*m" data-tans="11*m" data-options="2">10m != 11m; 2</code></td></tr>
<tr><td><b>ATNumSigFigs_VeryInaccurate</b></td><td>Very inaccurate.</td><td><code class="sample" data-sans="100*m" data-tans="11*m" data-options="2">100m != 11m; 2</code></td></tr>
<tr><td><b>ATNumSigFigs_WithinRange</b></td><td>Not quite "strict" significant-figures, but still accepted.</td><td><code class="sample" data-sans="10*m" data-tans="10*m" data-options="2">10m != 10m; 2</code></td></tr>
<tr><td><b>ATNumSigFigs_WrongSign</b></td><td>Sign error. Note may trigger if either value is zero.</td><td><code class="sample" data-sans="-11*m" data-tans="11*m" data-options="2">-11m != 11m; 2</code></td></tr>
<tr><td><b>ATUnits_incompatible_units</b></td><td>Wrong unit/dimension</td><td><code class="sample" data-sans="123kg" data-tans="123*mm" data-options="3">123kg != 123mm; 3</code></td></tr>
<tr><td><b>ATUnits_correct_numerical</b></td><td>Numerically equivalent, maybe not the correct unit</td><td><code class="sample" data-sans="123kg" data-tans="123*mm" data-options="3">123kg != 123mm; 3</code></td></tr>
<tr><td><b>ATUnits_compatible_units</b></td><td>Same dimension/unit, maybe not the same value</td><td><code class="sample" data-sans="123kg" data-tans="123*mg" data-options="3">123kg != 123mg; 3</code></td></tr>
<tr><td><b>ATUnits_units_match</b></td><td>Same unit and prefix, maybe not the same value</td><td><code class="sample" data-sans="123kg" data-tans="123*kg" data-options="3">123kg = 123kg; 3</code></td></tr>
<tr><td><b>ATUnits_SA_bad_units</b></td><td>The expression is not a number with a unit multiplier possible if the input does not come from units-input</td></tr>




</tbody>
</table>


[[jsxgraph input-ref-anst='anst' input-ref-anss='anss' input-ref-ansoptions='ansoptions'  height='1px']]
/* JSXGraph blocks allow direct JavaScript access that can be used
 * to do many things, just set the size of the div reserved for the 
 * graph that you are not actually building. Or hide it.
 */

var samples = $('code.sample');
samples.on('click', function(e) {
  // Not .data() as these may look like JSON.
  var t = $(e.target).attr('data-tans');
  var s = $(e.target).attr('data-sans');
  var o = $(e.target).attr('data-options');
  var sans = $('#' + $.escapeSelector(anss));
  var tans = $('#' + $.escapeSelector(anst));             
  var options = $('#' + $.escapeSelector(ansoptions));
  sans.val(s);
  tans.val(t);
  options.val(o);
  sans.trigger('change');
  tans.trigger('change');
  options.trigger('change');
  sans.trigger('input');
  tans.trigger('input');
  options.trigger('input');
});
[[/jsxgraph]]

<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="units" guidance-label="&quot;Students answer&quot;" validation-box="&quot;val&quot;" tans="&quot;1*kg&quot;"/>
    <input name="anst" type="algebraic" guidance-label="&quot;Teachers answer&quot;" validation-box="&quot;val&quot;" forbid-floats="false" forbid-strings="false" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" fix-spaces="true" fix-stars="true" tans="&quot;1&quot;"/>
    <input name="ansoptions" type="algebraic" guidance-label="&quot;Test options&quot;" allow-words="&quot;four,three,two&quot;" validation-box="&quot;val&quot;" forbid-floats="false" forbid-strings="false" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" fix-spaces="true" fix-stars="true" tans="&quot;[3,2]&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;" guidance-label="&quot;back to the test selection&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATUnitsSigFigs({#%_actual_anss#},{#%_actual_anst#},{#ansoptions#})&lt;\/code&gt;. However, that would not give the full feedback this test generates.&lt;\/p&gt;\n\n[[ if test=\&quot;%_valid_anss and %_valid_anst and %_valid_ansoptions and validoptions(ansoptions)\&quot; ]]\n[[ define tr='foo(%_actual_anss,%_actual_anst,ansoptions)'\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="UnitsSigFigs" value="1.0000000" firstnodename="Integer" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="The test" test="UnitsSigFigs" sans="anss" tans="anst" options="ansoptions" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"3-figs  0.000kg = 0kg; 3","condition":"true","inputs":{"anss":"dispdp(0,3)*kg","anst":"0*kg","ansoptions":"3"}},{"name":"Just 3-digs 0.123mm = 0m; [3,0]","condition":"true","inputs":{"anss":"dispdp(0.123,3)*mm","anst":"stackunits(0,m)","ansoptions":"[3,0]"}},{"name":"Var-ref 0.1234m = 0.123m; [four, four-1]","condition":"true","inputs":{"anss":"dispdp(0.1234,4)*m","anst":"0.123*m","ansoptions":"RAW:[four, four-1]"}},{"name":"Excessive accuracy 1.10000m = 1.1m; [3,-1]","condition":"true","inputs":{"anss":"RAW:1.10000*m","anst":"1.1*m","ansoptions":"[3,-1]"}},{"name":"Different prefix","condition":"true","inputs":{"anss":"1.00*kg","anst":"1000*g","ansoptions":"2"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"3-figs 0.001m != 0m; 3","condition":"true","inputs":{"anss":"dispdp(0.001,3)*m","anst":"stackunits(0,m)","ansoptions":"3"}},{"name":"Just 3-digs 0.12g != 0g; [3,0]","condition":"true","inputs":{"anss":"dispdp(0.12,2)*g","anst":"stackunits(0,g)","ansoptions":"[3,0]"}},{"name":"Var-ref 0.12345m != 0m; four","condition":"true","inputs":{"anss":"0.12345*m","anst":"stackunits(0,m)","ansoptions":"RAW:four"}},{"name":"Excessive and wrong 1.10001g != 1g; [3,-1]","condition":"true","inputs":{"anss":"dispdp(1.10001,5)*g","anst":"1.1*g","ansoptions":"[3,-1]"}},{"name":"Wrong dimension","condition":"true","inputs":{"anss":"11*mg","anst":"11*mm","ansoptions":"2"}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="Integer" test="AlgEquiv" sans="integerp(ansoptions)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="Large enough">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="List">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Large enough" test="AlgEquiv" sans="is(ansoptions&gt;0)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="The test">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The option value msut be larger</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="List" test="AlgEquiv" sans="listp(ansoptions)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="Two element list">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The option must either have an integer value or a list value.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Two element list" test="AlgEquiv" sans="length(ansoptions)" tans="2" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="First element positiveinteger">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The list must have exactly two elements.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="First element positiveinteger" test="AlgEquiv" sans="integerp(ansoptions[1]) and is(ansoptions[1]&gt;0)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="Second element integer">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The first element of the options list must be an positive integer.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Second element integer" test="AlgEquiv" sans="ev(integerp(ansoptions[2]) and is((ansoptions[2] + 2) &gt; 0),simp)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="The test">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The second element of the options list must be an integer.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="UnitsStrictSigFigs">
    <description>
<text>All about UnitsStrictSigFigs.</text>

    </description>
    <scenevariables>
<text><![CDATA[foo(a,b,c):=ATUnitsSigFigs_CASSigFigsWrapper(a,b,c,stackmap_get(_INPUT_STRING,"anss"),true);
validoptions(opts):=ev(
	if integerp(opts) then (
    	if opts > 0 then true else false
    ) else if listp(opts) then (
    	if length(opts) # 2 then false else (
        	if not apply("and", map(integerp, opts)) then false else (
            	if opts[1] < 1 then false 
                else if opts[2] < -1 then false,
                true
            )
        )
    ) else false
,simp);

/* Provide variables */
four:4;
three:3;
two:2;]]></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATUnitsStrictSigFigs(sans,tans,options)</code></h3>
<p>This is essenttially just the <code>ATUnitsSigFigs(sans,tans,options)</code>-test with the logic of requiring strictly equivalent units i.e. <code>1*m != 100*cm</code>.</p>

<p>A test for checking raw representation of a raw input-value. Only works with <code>sans</code> being a direct reference to an input. This test focuses on checking so called significant-figures. In general one can use this test to just check the existence on significant-figures or at the same time require that sufficient number of them equal to the expected value.</p>

<p>This is essenttially the same test as the <code>ATNumSigFigs</code> however this test includes logic for convertting units and allows the student to use for example milli-meters when the teachers answer is in centi-meters. There is a "strict" variant of this test where the units need to match.</p>

<p>The base-test does not use the strict significant-figures rules i.e. for this <code>100</code> has three significant-figures where for strict checks it would have less. There currently does not exist a strict significan-figures test for units.</p>

<p>The answer is expected to be a number followed by the unit, so in this example the <code>sans</code>-input is a units-input. It is not recommended to use more complex input values here.</p>

<p>Note that due to the direct connection to the raw input-value required by this test means that direct calling of this test is not something one can easily do. However, exploring the logic behind the validation message in this question may give a hint on how to do it.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code>, <code>tans</code>, and <code>options</code> and see what happens. Note, for testing purposes the session has the following variables <code>four:4;three:3;two:2</code>, should you want to test certain behaviour.</p>

<p><code>sans:</code>[[input:anss]], <code>tans:</code>[[input:anst]], <code>options:</code>[[input:ansoptions]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:UnitsStrictSigFigs]]</p>

<h4>Options</h4>
<p>This test relies heavily on options. One will need to define either one integer valued option or a list of two integers. The first case is equivalent of giving a list with two equal elements so lets focus on the list form as it is the one that matters:</p>
<ol>
<li>The first element (lets call it N) of the list describes how many significant-figures need to be present in the answer. In general one requires an exactly N significant-figures, should one need to allow more to be present then setting the second element to <code>-1</code> will make the test allow N or more. However, in that case all those N+ digits must be correct, to deal with that try setting the teachers asnwer to be the students answer.</li>
<li>The second element (lets call it M) defines how many of the digits must match the teachers answer, typically one sets <code>M = N - 1</code> to allow some rounding errors in the last digit. Naturally, <code>M &lte; N</code> and both of them are integers.</li>
</ol>

<h4>Generated feedback</h4>
<p>The test will give feedback about the number of digits and note about small or large accuracy issues. Depending on your use case you may wish to silence this test and construct your own feedback, using suitable combinations of this test with different options to identify the cases that matter to you. The feedback will additionally note issues with wrong units.</p>

<h4>Classification notes</h4>
<p>This test will provide plenty of notes about how the answer differs for later statistical analysis, here are some examples, click the samples to see them in action. Most notes are inherited from the underlying <code>ATNumSigFigs.</code>.</p>

<table>
<thead>
<tr><th>Token</th><th>General description</th><th>Sample(s)</th></tr>
</thead>
<tbody>
<tr><td><b>ATNumSigFigs_WrongDigits</b></td><td>Wrong number of digits.</td><td><code class="sample" data-sans="0*m" data-tans="0*m" data-options="3">0m != 0m; 3</code></td></tr>
<tr><td><b>ATNumSigFigs_Inaccurate</b></td><td>Slightly inaccurate.</td><td><code class="sample" data-sans="10*m" data-tans="11*m" data-options="2">10m != 11m; 2</code></td></tr>
<tr><td><b>ATNumSigFigs_VeryInaccurate</b></td><td>Very inaccurate.</td><td><code class="sample" data-sans="100*m" data-tans="11*m" data-options="2">100m != 11m; 2</code></td></tr>
<tr><td><b>ATNumSigFigs_WithinRange</b></td><td>Not quite "strict" significant-figures, but still accepted.</td><td><code class="sample" data-sans="10*m" data-tans="10*m" data-options="2">10m != 10m; 2</code></td></tr>
<tr><td><b>ATNumSigFigs_WrongSign</b></td><td>Sign error. Note may trigger if either value is zero.</td><td><code class="sample" data-sans="-11*m" data-tans="11*m" data-options="2">-11m != 11m; 2</code></td></tr>
<tr><td><b>ATUnits_incompatible_units</b></td><td>Wrong unit/dimension</td><td><code class="sample" data-sans="123kg" data-tans="123*mm" data-options="3">123kg != 123mm; 3</code></td></tr>
<tr><td><b>ATUnits_correct_numerical</b></td><td>Numerically equivalent, maybe not the correct unit</td><td><code class="sample" data-sans="123kg" data-tans="123*mm" data-options="3">123kg != 123mm; 3</code></td></tr>
<tr><td><b>ATUnits_compatible_units</b></td><td>Same dimension/unit, maybe not the same value</td><td><code class="sample" data-sans="123kg" data-tans="123*mg" data-options="3">123kg != 123mg; 3</code></td></tr>
<tr><td><b>ATUnits_units_match</b></td><td>Same unit and prefix, maybe not the same value</td><td><code class="sample" data-sans="123kg" data-tans="123*kg" data-options="3">123kg = 123kg; 3</code></td></tr>
<tr><td><b>ATUnits_SA_bad_units</b></td><td>The expression is not a number with a unit multiplier possible if the input does not come from units-input</td></tr>




</tbody>
</table>


[[jsxgraph input-ref-anst='anst' input-ref-anss='anss' input-ref-ansoptions='ansoptions'  height='1px']]
/* JSXGraph blocks allow direct JavaScript access that can be used
 * to do many things, just set the size of the div reserved for the 
 * graph that you are not actually building. Or hide it.
 */

var samples = $('code.sample');
samples.on('click', function(e) {
  // Not .data() as these may look like JSON.
  var t = $(e.target).attr('data-tans');
  var s = $(e.target).attr('data-sans');
  var o = $(e.target).attr('data-options');
  var sans = $('#' + $.escapeSelector(anss));
  var tans = $('#' + $.escapeSelector(anst));             
  var options = $('#' + $.escapeSelector(ansoptions));
  sans.val(s);
  tans.val(t);
  options.val(o);
  sans.trigger('change');
  tans.trigger('change');
  options.trigger('change');
  sans.trigger('input');
  tans.trigger('input');
  options.trigger('input');
});
[[/jsxgraph]]

<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="units" guidance-label="&quot;Students answer&quot;" validation-box="&quot;val&quot;" tans="&quot;1*kg&quot;"/>
    <input name="anst" type="algebraic" guidance-label="&quot;Teachers answer&quot;" validation-box="&quot;val&quot;" forbid-floats="false" forbid-strings="false" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" fix-spaces="true" fix-stars="true" tans="&quot;1&quot;"/>
    <input name="ansoptions" type="algebraic" guidance-label="&quot;Test options&quot;" allow-words="&quot;four,three,two&quot;" validation-box="&quot;val&quot;" forbid-floats="false" forbid-strings="false" split-number-letter-boundary="false" split-prefixes-from-functions="false" split-implied-variables="false" fix-spaces="true" fix-stars="true" tans="&quot;[3,2]&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;" guidance-label="&quot;back to the test selection&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATUnitsStrictSigFigs({#%_actual_anss#},{#%_actual_anst#},{#ansoptions#})&lt;\/code&gt;. However, that would not give the full feedback this test generates.&lt;\/p&gt;\n\n[[ if test=\&quot;%_valid_anss and %_valid_anst and %_valid_ansoptions and validoptions(ansoptions)\&quot; ]]\n[[ define tr='foo(%_actual_anss,%_actual_anst,ansoptions)'\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="UnitsStrictSigFigs" value="1.0000000" firstnodename="Integer" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="The test" test="UnitsStrictSigFigs" sans="anss" tans="anst" options="ansoptions" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"3-figs  0.000kg = 0kg; 3","condition":"true","inputs":{"anss":"dispdp(0,3)*kg","anst":"0*kg","ansoptions":"3"}},{"name":"Var-ref 0.1234m = 0.123m; [four, four-1]","condition":"true","inputs":{"anss":"dispdp(0.1234,4)*m","anst":"0.123*m","ansoptions":"RAW:[four, four-1]"}},{"name":"Excessive accuracy 1.10000m = 1.1m; [3,-1]","condition":"true","inputs":{"anss":"RAW:1.10000*m","anst":"1.1*m","ansoptions":"[3,-1]"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"3-figs 0.001m != 0m; 3","condition":"true","inputs":{"anss":"dispdp(0.001,3)*m","anst":"stackunits(0,m)","ansoptions":"3"}},{"name":"Just 3-digs 0.12g != 0g; [3,0]","condition":"true","inputs":{"anss":"dispdp(0.12,2)*g","anst":"stackunits(0,g)","ansoptions":"[3,0]"}},{"name":"Var-ref 0.12345m != 0m; four","condition":"true","inputs":{"anss":"0.12345*m","anst":"stackunits(0,m)","ansoptions":"RAW:four"}},{"name":"Excessive and wrong 1.10001g != 1g; [3,-1]","condition":"true","inputs":{"anss":"dispdp(1.10001,5)*g","anst":"1.1*g","ansoptions":"[3,-1]"}},{"name":"Wrong dimension","condition":"true","inputs":{"anss":"11*mg","anst":"11*mm","ansoptions":"2"}},{"name":"Different prefix","condition":"true","inputs":{"anss":"1.000*kg","anst":"1000*g","ansoptions":"3"}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="Integer" test="AlgEquiv" sans="integerp(ansoptions)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="Large enough">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="List">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Large enough" test="AlgEquiv" sans="is(ansoptions&gt;0)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="The test">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The option value msut be larger</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="List" test="AlgEquiv" sans="listp(ansoptions)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="Two element list">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The option must either have an integer value or a list value.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Two element list" test="AlgEquiv" sans="length(ansoptions)" tans="2" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="First element positiveinteger">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The list must have exactly two elements.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="First element positiveinteger" test="AlgEquiv" sans="integerp(ansoptions[1]) and is(ansoptions[1]&gt;0)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="Second element integer">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The first element of the options list must be an positive integer.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="Second element integer" test="AlgEquiv" sans="ev(integerp(ansoptions[2]) and is((ansoptions[2] + 2) &gt; 0),simp)" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="The test">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>The second element of the options list must be an integer.</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="ATNumerical">
    <description>
<text>ATNumerical i.e. NumRelative and NumAbsolute</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATNumerical(sans,tans,tolerance,"RELATIVE"|"ABSOLUTE")</code></h3>
<p>This is a simple numerical tolerance test, it does however provide some logic for dealing with lists and sets which complicates things.</p>

<p>Note that the tests <code>ATNumAbsolute</code> and <code>ATNumRelative</code> are just versions of the same basic test.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code>, <code>tans</code>, and <code>tolerance</code> and see what happens.</p>

<p><code>sans:</code>[[input:anss]], <code>tans:</code>[[input:anst]]</p> <code>tolerance:</code>[[input:ansoptions]]</p>
[[input:testtype]]
<p>[[validation:val]]</p>
<p>[[feedback:primary]]</p>



<h4>Options</h4>
<p>The option is now mandatory and describes the tolerance as a single number, in STACK before PRT-compilation the option had a default value of 0.01. The quiet-option is always there.</p>

<h4>Generated feedback</h4>
<p>These tests provide feedback about the type of the answer and in the case of lists and sets may point out which elements are wrong. When dealing with lists or sets one may need to consider the quiet option.</p>

<h4>Classification notes</h4>
<table>
<thead>
<tr><th>Token</th><th>General description</th></tr>
</thead>
<tbody>
<tr><td><b>ATNumerical_FAILED</b></td><td>Something failed, probably the wrong type of input, not a number or list or set. Could be a bad <code>tans</code>.</td></tr>
<tr><td><b>ATNumerical_SA_not_list</b></td><td>A list was being expected.</td></tr>
<tr><td><b>ATNumerical_SA_not_set</b></td><td>A set was being expected.</td></tr>
<tr><td><b>ATNumerical_wronglen</b></td><td>Wrong number of elements in the list or set</td></tr>
<tr><td><b>ATNumerical_wrongentries</b></td><td>The elements that are wrong, also lists the values of the wrong elements.</td></tr>
</tbody>
</table>



<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="algebraic" forbid-floats="false" validation-box="&quot;val&quot;" no-units="true" tans="&quot;1&quot;"/>
    <input name="anst" type="algebraic" forbid-floats="false" validation-box="&quot;val&quot;" no-units="true" tans="&quot;1&quot;"/>
    <input name="ansoptions" type="algebraic" forbid-floats="false" validation-box="&quot;val&quot;" no-units="true" tans="&quot;0.01&quot;"/>
    <input name="testtype" type="mcq" mcq-options="[{&quot;value&quot;:&quot;\&quot;ABSOLUTE\&quot;&quot;,&quot;label&quot;:&quot;Absolute-tolerance&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;\&quot;RELATIVE\&quot;&quot;,&quot;label&quot;:&quot;Relative-tolerance&quot;,&quot;group&quot;:&quot;distractor&quot;}]" validation-box="&quot;val&quot;" mcq-no-deselect="true" tans="&quot;\&quot;Relative\&quot;&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;"/>
    <vbox name="val" type="custom" text="&quot;[[ if test='%_valid_testtype and is(%_actual_testtype=\&quot;RELATIVE\&quot;)' ]]\n&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATNumRelative({#anss#},{#anst#},{#%_actual_ansoptions#})&lt;\/code&gt;&lt;\/p&gt;\n[[ elif test='%_valid_testtype and is(%_actual_testtype=\&quot;ABSOLUTE\&quot;)' ]]\n&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATNumAbsolute({#anss#},{#anst#},{#%_actual_ansoptions#})&lt;\/code&gt;&lt;\/p&gt;\n[[\/if]]\n\n[[ if test=\&quot;%_valid_anss and %_valid_anst and %_valid_ansoptions and numberp(ev(%_actual_ansoptions,simp)) and %_valid_testtype\&quot; ]]\n[[ define tr=\&quot;ATNumerical(anss,anst,ev(%_actual_ansoptions,simp),%_actual_testtype)\&quot;\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="primary" value="1.0000000" firstnodename="Test type" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Test type" test="AlgEquiv" sans="testtype" tans="&quot;RELATIVE&quot;" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="NumRelative">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="NumAbsolute">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="NumRelative" test="NumRelative" sans="anss" tans="anst" options="ansoptions" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1=1","condition":"true","inputs":{"anss":"1.0","anst":"1.0","ansoptions":"0.01","testtype":"\"RELATIVE\""}},{"name":"1.1 = 1.0 +- 0.1","condition":"true","inputs":{"anss":"1.1","anst":"1.0","ansoptions":"0.1","testtype":"\"RELATIVE\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1.1 != 1.0 +- 0.01","condition":"true","inputs":{"anss":"1.1","anst":"1.0","ansoptions":"0.01","testtype":"\"RELATIVE\""}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="NumAbsolute" test="NumAbsolute" sans="anss" tans="anst" options="ansoptions" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1=1","condition":"true","inputs":{"anss":"1.0","anst":"1.0","ansoptions":"0.01","testtype":"\"ABSOLUTE\""}},{"name":"1.1 = 1.0 +- 0.1","condition":"true","inputs":{"anss":"1.1","anst":"1.0","ansoptions":"0.1","testtype":"\"RELATIVE\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1.1 != 1.0 +- 0.01","condition":"true","inputs":{"anss":"1.1","anst":"1.0","ansoptions":"0.01","testtype":"\"RELATIVE\""}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="ATUnitsFun">
    <description>
<text>ATUnitsFun relative and absolute tolerances with units with unit conversion or not.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATUnitsRelative(sans,tans,tolerance), 
ATUnitsStrictRelative(sans,tans,tolerance), 
ATUnitsAbsolute(sans,tans,tolerance), 
ATUnitsStrictAbsolute(sans,tans,tolerance)</code></h3>

<p>Numerical tolerance tests for dimensional answers. These tests are a bit odd from the point of view of the tolerances as the tolerances will be interpreted differently depending on whether the units of <code>sans</code> and <code>tans</code> strictly match (same prefixes). If they match the tolerances are in relation to the numerical value of the <code>tans</code> otherwise the tolerance is in relation to the numerical value of the <code>tans</code> after it has been convertted to base SI-units. <i>This complication will make it very inconvenient to use absolute tolerances, unless one ties down the unit-prefixes</i>, it is expected that eventtually new forms of tests are coming where the absolute-tolerances may be given with units and are thus truly absolute and not prefix dependent.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code>, <code>tans</code>, and <code>tolerance</code> and see what happens. Also select if you want strict-units and if you wish to use absolute or relative testing.</p>

<p><code>sans:</code>[[input:anss]], <code>tans:</code>[[input:anst]]</p> <code>tolerance:</code>[[input:tol]]</p>
[[input:testtype]]
<p>[[validation:val]]</p>
<p>[[feedback:primary]]</p>

<h4>Options</h4>
<p>The tolerance is a mandatory option, while STACK had a default tolerance Stateful does not. The tolerance is a number or a reference to one.</p>

<h4>Generated feedback</h4>
<p>There is practically no feedback.</p>

<h4>Classification notes</h4>
<table>
<thead>
<tr><th>Token</th><th>General description</th></tr>
</thead>
<tbody>
<tr><td><b>ATUnits_units_match</b></td><td>Exact unit-match.</td></tr>
<tr><td><b>ATUnits_compatible_units</b></td><td>Units represent the same dimensionm can be convertted to equal SI-base-units.</td></tr>
<tr><td><b>ATUnits_incompatible_units</b></td><td>The units are not representting the same dimension.</td></tr>
<tr><td><b>ATUnits_correct_numerical</b></td><td>The numerical part matches even when the units are wrong.</td></tr>
<tr><td><b>ATUnits_SA_no_units</b></td><td>No units present in the students answer, you probably want to use units-inputs to avoid this.</td></tr>
</tbody>
</table>


<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="units" validation-box="&quot;val&quot;" tans="&quot;1*kg&quot;"/>
    <input name="anst" type="units" validation-box="&quot;val&quot;" tans="&quot;1*kg&quot;"/>
    <input name="tol" type="numerical" validation-box="&quot;val&quot;" tans="&quot;0.01&quot;"/>
    <input name="testtype" type="mcq" mcq-options="[{&quot;value&quot;:&quot;\&quot;ATUnitsRelative\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;Relative-tolerance, with unit conversion.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;\&quot;ATUnitsStrictRelative\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;Relative-tolerance, without unit conversion.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;},{&quot;value&quot;:&quot;\&quot;ATUnitsAbsolute\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;Absolute-tolerance, with unit conversion &lt;b&gt;NOTE questionable logic, which is why this should not even be an option&lt;\/b&gt;&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;\&quot;ATUnitsStrictAbsolute\&quot;&quot;,&quot;label&quot;:&quot;&lt;p&gt;Absolute-tolerance, without unit conversion&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;}]" validation-box="&quot;val&quot;" mcq-no-deselect="true" tans="&quot;\&quot;ATUnitsRelative\&quot;&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;"/>
    <vbox name="val" type="custom" text="&quot;[[ if test='%_valid_testtype and is(%_actual_testtype=\&quot;ATUnitsRelative\&quot;)' ]]\n&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATUnitsRelative({#%_actual_anss#},{#%_actual_anst#},{#%_actual_tol#})&lt;\/code&gt;&lt;\/p&gt;\n[[ elif test='%_valid_testtype and is(%_actual_testtype=\&quot;ATUnitsStrictRelative\&quot;)' ]]\n&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATUnitsStrictRelative({#%_actual_anss#},{#%_actual_anst#},{#%_actual_tol#})&lt;\/code&gt;&lt;\/p&gt;\n[[ elif test='%_valid_testtype and is(%_actual_testtype=\&quot;ATUnitsAbsolute\&quot;)' ]]\n&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATUnitsAbsolute({#%_actual_anss#},{#%_actual_anst#},{#%_actual_tol#})&lt;\/code&gt;&lt;\/p&gt;\n[[ elif test='%_valid_testtype and is(%_actual_testtype=\&quot;ATUnitsStrictAbsolute\&quot;)' ]]\n&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATUnitsStrictAbsolute({#%_actual_anss#},{#%_actual_anst#},{#%_actual_tol#})&lt;\/code&gt;&lt;\/p&gt;\n[[\/if]]\n\n[[ if test=\&quot;%_valid_anss and %_valid_anst and %_valid_tol and numberp(ev(%_actual_tol,simp)) and %_valid_testtype\&quot; ]]\n[[ if test='is(%_actual_testtype=\&quot;ATUnitsRelative\&quot;)']]\n[[ define tr='ATUnitsRelative(%_actual_anss, %_actual_anst, ev(%_actual_tol, simp))'\/]]\n[[ elif test='is(%_actual_testtype=\&quot;ATUnitsStrictRelative\&quot;)']]\n[[ define tr='ATUnitsStrictRelative(%_actual_anss, %_actual_anst, ev(%_actual_tol, simp))'\/]]\n[[ elif test='is(%_actual_testtype=\&quot;ATUnitsAbsolute\&quot;)']]\n[[ define tr='ATUnitsAbsolute(%_actual_anss, %_actual_anst, ev(%_actual_tol, simp))'\/]]\n[[ elif test='is(%_actual_testtype=\&quot;ATUnitsStrictAbsolute\&quot;)']]\n[[ define tr='ATUnitsStrictAbsolute(%_actual_anss, %_actual_anst, ev(%_actual_tol, simp))'\/]]\n[[\/if]]\n\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]\n\n[[list_errors:anss,anst,tol,testtype]]&quot;"/>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="primary" value="1.0000000" firstnodename="IsRelative" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="IsRelative" test="StringContains" sans="testtype" tans="&quot;Relative&quot;" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="IsStrictRelative">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="IsStrictAbsolute">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="IsStrictRelative" test="StringContains" sans="testtype" tans="&quot;Strict&quot;" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="UnitsStrictRelative">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="UnitsRelative">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="UnitsStrictRelative" test="UnitsStrictRelative" sans="anss" tans="anst" options="tol" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>StrictRelative: PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Strict Relative 1","condition":"true","inputs":{"anss":"0*m\/s","anst":"0*m\/s","tol":"0.01","testtype":"\"ATUnitsStrictRelative\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>StrictRelative: FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Strict Relative 2","condition":"true","inputs":{"anss":"0*m\/s","anst":"0*km\/s","tol":"0.01","testtype":"\"ATUnitsStrictRelative\""}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="UnitsRelative" test="UnitsRelative" sans="anss" tans="anst" options="tol" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>Relative: PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Relative 1","condition":"true","inputs":{"anss":"1.1e-6*Mg","anst":"1.2*kN*ns\/(mm*Hz)","tol":"0.15","testtype":"\"ATUnitsRelative\""}},{"name":"Relative 3 matching dimension","condition":"true","inputs":{"anss":"0.0*m","anst":"0.0*km","tol":"0.01","testtype":"\"ATUnitsRelative\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>Relative: FAIL</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Relative 2","condition":"true","inputs":{"anss":"1.1e-6*Mg","anst":"1.2*kN*ns\/(mm*Hz)","tol":"0.01","testtype":"\"ATUnitsRelative\""}},{"name":"Relative 4 mismatched dimension","condition":"true","inputs":{"anss":"0.0*m","anst":"0.0*m\/s","tol":"0.01","testtype":"\"ATUnitsRelative\""}}]]]></text>

        </tests>
        </false>
      </node>
      <node name="IsStrictAbsolute" test="StringContains" sans="testtype" tans="&quot;Strict&quot;" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="UnitsStrictAbsolute">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="UnitsAbsolute">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="UnitsStrictAbsolute" test="UnitsStrictAbsolute" sans="anss" tans="anst" options="tol" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>StrictAbsolute: PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Strict Absolute 1","condition":"true","inputs":{"anss":"1*m","anst":"1*m","tol":"0.01","testtype":"\"ATUnitsStrictAbsolute\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>StrictAbsolute: FAIL</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
      <node name="UnitsAbsolute" test="UnitsAbsolute" sans="anss" tans="anst" options="tol" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<b>Absolute: PASS</b>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Ansolute 1","condition":"true","inputs":{"anss":"1*m","anst":"1*m","tol":"0.01","testtype":"\"ATUnitsAbsolute\""}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<b>Absolute: FAIL</b>]]></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="LowestTerms">
    <description>
<text><![CDATA[A test that looks for fractions in the answer and complains is any of them are not fully "simplified"]]></text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATLowestTerms(sans,noop)</code></h3>
<p>This is a test of the form of the answer. It compares the answer agains nothing but goes though all the fractions and check that there are no common factors that could have been eliminated. For historical reason the raw-test takes two values but does nothing with the latter.</p>

<p>The test will also care about powers, especially frcational powers, present in the denominator as well as imaginary-values in denominator.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code> and see what happens</p>

<p><code>sans:</code>[[input:anss]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:primary]]</p>

<h4>Options</h4>
<p>The only option is to silence the test.</p>

<h4>Generated feedback</h4>
<p>The test will point out the fractions that could be further simplified.</p>

<h4>Classification notes</h4>
<table>
<thead>
<tr><th>Token</th><th>General description</th></tr>
</thead>
<tbody>
<tr><td><b>ATLowestTerms_entries</b></td><td>There are terms to simplify.</td></tr>
<tr><td><b>ATLowestTerms_not_rat</b></td><td>There exists a fractional power in some denominator.</td></tr>
</tbody>
</table>



<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="algebraic" forbid-floats="false" validation-box="&quot;val&quot;" no-units="true" tans="&quot;2\/4&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATLowestTerms({#anss#},0)&lt;\/code&gt;&lt;\/p&gt;\n\n[[ if test=\&quot;%_valid_anss\&quot; ]]\n[[ define tr=\&quot;ATLowestTerms(anss,0)\&quot;\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="primary" value="1.0000000" firstnodename="The test" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="The test" test="LowestTerms" sans="anss" tans="" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<p><b>PASS</b></p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1\/2","condition":"true","inputs":{"anss":"1\/2"}},{"name":"1\/2+1\/3","condition":"true","inputs":{"anss":"1\/2+1\/3"}},{"name":"sqrt(2)\/3","condition":"true","inputs":{"anss":"sqrt(2)\/3"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<p><b>FAIL</b></p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"2\/4","condition":"true","inputs":{"anss":"2\/4"}},{"name":"1\/2+2\/4","condition":"true","inputs":{"anss":"1\/2+2\/4"}},{"name":"1\/sqrt(2)","condition":"true","inputs":{"anss":"1\/sqrt(2)"}},{"name":"cos(3\/6*x)","condition":"true","inputs":{"anss":"cos(3\/6*x)"}},{"name":"3\/9=x","condition":"true","inputs":{"anss":"3\/9=x"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="ATGT(E)">
    <description>
<text>Simple numerical separation tests</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATGT(sans,tans)</code> and <code>ATGTE(sans,tans)</code></h3>
<p>These tests are intended to divide the search space by a numerical value. The values compared need to evaluate to numbers for the tests to work.</p>

<p> There are no LT and LTE tests as it is assumed that the author can swap the <code>sans</code> and <code>tans</code> accordingly.</p>

<h4>Direct test</h4>
<p>Fill in the <code>sans</code> and <code>tans</code> and see what happens</p>

<p><code>sans:</code>[[input:anss]] <code>tans:</code>[[input:anst]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:gt]]</p>
<p>[[feedback:gte]]</p>

<h4>Options</h4>
<p>The only option is to silence the test.</p>

<h4>Generated feedback</h4>
<p>This test gives no feedback.</p>

<h4>Classification notes</h4>
<table>
<thead>
<tr><th>Token</th><th>General description</th></tr>
</thead>
<tbody>
<tr><td><b>ATGT_false</b></td><td>When the GT-test does not pass.</td></tr>
<tr><td><b>ATGT_true</b></td><td>When it passes.</td></tr>
<tr><td><b>ATGTE_false</b></td><td>When the GTE-test does not pass.</td></tr>
<tr><td><b>ATGTE_true</b></td><td>When it passes.</td></tr>
<tr><td><b>Not number</b></td><td>If the values are not numbers.</td></tr>
</tbody>
</table>



<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="algebraic" forbid-floats="false" validation-box="&quot;val&quot;" tans="&quot;1&quot;"/>
    <input name="anst" type="algebraic" forbid-floats="false" validation-box="&quot;val&quot;" tans="&quot;1&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATGT({#%_actual_anss#},{#%_actual_anst#})&lt;\/code&gt; or &lt;code&gt;ATGTE({#%_actual_anss#},{#%_actual_anst#})&lt;\/code&gt;&lt;\/p&gt;\n\n&lt;h4&gt;&lt;code&gt;ATGT&lt;\/code&gt;&lt;\/h4&gt;\n[[ if test=\&quot;%_valid_anss and %_valid_anst\&quot; ]]\n[[ define tr=\&quot;ATGT(%_actual_anss,%_actual_anst)\&quot;\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]\n\n&lt;h4&gt;&lt;code&gt;ATGTE&lt;\/code&gt;&lt;\/h4&gt;\n[[ if test=\&quot;%_valid_anss and %_valid_anst\&quot; ]]\n[[ define tr=\&quot;ATGTE(%_actual_anss,%_actual_anst)\&quot;\/]]&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="gt" value="1.0000000" firstnodename="ATGT" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="ATGT" test="GT" sans="anss" tans="anst" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<p><b>GT:PASS</b></p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1\/2 > 1\/3","condition":"true","inputs":{"anss":"1\/2","anst":"1\/3"}},{"name":"pi > 3","condition":"true","inputs":{"anss":"pi","anst":"3"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<p><b>GT:FAIL</b></p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1\/3 <= 1\/2","condition":"true","inputs":{"anss":"1\/3","anst":"1\/2"}},{"name":"x <= 5","condition":"true","inputs":{"anss":"x","anst":"5"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="gte" value="1.0000000" firstnodename="ATGTE" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="ATGTE" test="GTE" sans="anss" tans="anst" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<p><b>GTE:PASS</b></p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1\/2 >= 1\/3","condition":"true","inputs":{"anss":"1\/2","anst":"1\/3"}},{"name":"1\/2 >= 2\/4","condition":"true","inputs":{"anss":"1\/2","anst":"2\/4"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<p><b>GTE:FAIL</b></p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"1\/3 < 1\/2","condition":"true","inputs":{"anss":"1\/3","anst":"1\/2"}},{"name":"3 <= pi","condition":"true","inputs":{"anss":"3","anst":"pi"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
  <scene name="Expanded">
    <description>
<text>Is the expression fully expanded, i.e. are here any parentheses.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3><code>ATExpanded(sans,noop)</code></h3>
<p>This is a test of the form of the answer. It checks that the expression is fully expanded and contains no parenthesis that could be removed. For historical reason the raw-test takes two values but does nothing with the latter.</p>


<h4>Direct test</h4>
<p>Fill in the <code>sans</code> and see what happens</p>

<p><code>sans:</code>[[input:anss]]</p>
<p>[[validation:val]]</p>
<p>[[feedback:primary]]</p>

<h4>Options</h4>
<p>The only option is to silence the test.</p>

<h4>Generated feedback</h4>
<p>The test will tell if the answer is not an expression, i.e. if an equality is being given.</p>

<h4>Classification notes</h4>
<table>
<thead>
<tr><th>Token</th><th>General description</th></tr>
</thead>
<tbody>
<tr><td><b>ATExpanded_TRUE</b></td><td>The expression is fully expanded.</td></tr>
<tr><td><b>ATExpanded_FALSE</b></td><td>There exists somethign to expand.</td></tr><tr><td><b>ATExpanded_SA_not_expression</b></td><td>The answer was not an expression.</td></tr>
</tbody>
</table>



<p>[[input:back]][[feedback:back]]</p>]]></text>
    </scenetext>
    <input name="anss" type="algebraic" validation-box="&quot;val&quot;" no-units="true" tans="&quot;x*(2+x)&quot;"/>
    <input name="back" type="button" input-label="&quot;Back&quot;"/>
    <vbox name="val" type="custom" text="&quot;&lt;p&gt;These parameters would be equivalent to calling &lt;code&gt;ATExpanded({#anss#},0)&lt;\/code&gt;&lt;\/p&gt;\n\n[[ if test=\&quot;%_valid_anss\&quot; ]]\n[[ define tr=\&quot;ATExpanded(anss,0)\&quot;\/]]\n&lt;p&gt;The test would\n[[ if test=\&quot;tr[2]\&quot;]]\npass,\n[[else]]\nfail,\n[[\/if]]\n[[ if test='is(tr[3]=\&quot;\&quot;)']]\nthere would be no notes,\n[[else]]\nit would return specific notes &lt;code&gt;{@tr[3]@}&lt;\/code&gt;,\n[[\/if]]\n[[ if test='is(tr[4]=\&quot;\&quot;)']]\nand no feedback.\n[[else]]\nand some feedback to see it press 'Check'.\n[[\/if]]\n&lt;\/p&gt;\n[[\/ if ]]&quot;"/>
    <prt name="back" value="1.0000000" firstnodename="Root node" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="back" tans="true" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text></text>

        </variables>
          <feedback>
<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text></text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
    <prt name="primary" value="1.0000000" firstnodename="The test" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="The test" test="Expanded" sans="anss" tans="" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text><![CDATA[<p><b>PASS</b></p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"x*2+x","condition":"true","inputs":{"anss":"x*2+x"}},{"name":"3+2*sqrt(3)","condition":"true","inputs":{"anss":"3+2*sqrt(3)"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text><![CDATA[<p><b>FAIL</b></p>]]></text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"x*(x+1)","condition":"true","inputs":{"anss":"x*(x+1)"}},{"name":"x^2-(a+b)*x+a*b","condition":"true","inputs":{"anss":"x^2-(a+b)*x+a*b"}}]]]></text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
</stateful>  </question>

<!-- question: 836  -->
  <question type="stateful">
    <name>
      <text>TECH: Default validation-messages for the different input-types</text>
    </name>
    <questiontext format="html">
      <text>The default validation message display works pretty well for singular inputs, but one should know that one can always disable validation-messages or replace them.</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
<stateful statefulversion="2020040800" stackversion="2020040300" entryscene="entry" questionsimplify="1" assumepositive="0" assumereal="0" penalty="0.3333333" multiplicationsign="dot" sqrtsign="1" complexno="i" inversetrig="cos-1" matrixparens="[" parlength="-1" variants="{&quot;_set&quot;:0,&quot;A&quot;:[],&quot;B&quot;:[],&quot;C&quot;:[]}">
  <questionvariables>
<text></text>

  </questionvariables>
  <questionnote>
<text></text>

  </questionnote>
  <scene name="entry">
    <description>
<text>The initial scene for a Stateful-question, no question can exist without a scene.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<h3>Default validation-message demonstrator</h3>
<p>The default validation message display works pretty well for singular inputs, but one should know that one can always disable validation-messages or replace them. In this example we display the messages in their three default configurations for all input-types and their major subtypes.</p>

<h4>algebraic</h4>
<p>Nothing special here. Note however that list of units will only list units if we are in units mode, this question is in units mode as it has units inputs.</p>
<table>
	<tr><th>No listings</th><th>List of variables</th><th>List of units</th></tr>
    <tr><td>[[input:ans1]]</td><td>[[input:ans2]]</td><td>[[input:ans3]]</td></tr>
    <tr><td>[[validation:ans1]]</td><td>[[validation:ans2]]</td><td>[[validation:ans3]]</td></tr>
</table>

<h4>button</h4>
<p>The button input has no validation display possibilities</p>

<h4>matrix</h4>
<p>The matrix input may take plenty of room and looks a bit different depending on the operating-mode it uses</p>
<h5>matrix: algebraic-mode</h5>
<table>
	<tr><th>No listings</th><th>List of variables</th><th>List of units</th></tr>
    <tr><td>[[input:ans4]]</td><td>[[input:ans5]]</td><td>[[input:ans6]]</td></tr>
    <tr><td>[[validation:ans4]]</td><td>[[validation:ans5]]</td><td>[[validation:ans6]]</td></tr>
</table>
<h5>matrix: data-mode</h5>
<table>
	<tr><th>No listings</th><th>List of variables</th><th>List of units</th></tr>
    <tr><td>[[input:ans7]]</td><td>[[input:ans8]]</td><td>[[input:ans9]]</td></tr>
    <tr><td>[[validation:ans7]]</td><td>[[validation:ans8]]</td><td>[[validation:ans9]]</td></tr>
</table>

<h4>mcq</h4>
<p>MCQ-style inputs may not require any validation-messages but if the default validaiton is in use one needs to be careful about the labels and how they fit the message.</p>
<h5>mcq:dropdown (rich)</h5>
<table>
	<tr><th>No listings</th><th>List of variables</th><th>List of units</th></tr>
    <tr><td>[[input:ans10]]</td><td>[[input:ans11]]</td><td>[[input:ans12]]</td></tr>
    <tr><td>[[validation:ans10]]</td><td> [[validation:ans11]] </td><td>[[validation:ans12]]</td></tr>
</table>

[[if test="false"]][[feedback:testprt]] Here to block the warning from the editor.[[/if]]]]></text>
    </scenetext>
    <input name="ans1" type="algebraic" validation-box="&quot;automatic without listings&quot;" tans="&quot;1&quot;"/>
    <input name="ans2" type="algebraic" tans="&quot;1&quot;"/>
    <input name="ans3" type="algebraic" validation-box="&quot;automatic with list of units&quot;" tans="&quot;1&quot;"/>
    <input name="ans4" type="matrix" matrix-wrap-left="&quot;(&quot;" matrix-wrap-right="&quot;)&quot;" validation-box="&quot;automatic without listings&quot;" tans="&quot;matrix([1,2],[3,4])&quot;"/>
    <input name="ans5" type="matrix" matrix-wrap-left="&quot;[&quot;" matrix-wrap-right="&quot;]&quot;" matrix-max-rows="&quot;5&quot;" tans="&quot;matrix([1,2],[3,4])&quot;"/>
    <input name="ans6" type="matrix" matrix-max-columns="&quot;5&quot;" matrix-max-rows="&quot;5&quot;" matrix-wrap-left="&quot;{&quot;" matrix-wrap-right="&quot;}&quot;" validation-box="&quot;automatic with list of units&quot;" tans="&quot;matrix([1,2],[3,4])&quot;"/>
    <input name="ans7" type="matrix" matrix-mode="&quot;data&quot;" matrix-columns="[{&quot;label&quot;:&quot;Algebraic&quot;,&quot;type&quot;:&quot;algebraic&quot;,&quot;min-dp&quot;:&quot;2&quot;},{&quot;label&quot;:&quot;Numeric&quot;,&quot;type&quot;:&quot;numeric&quot;,&quot;min-dp&quot;:&quot;3&quot;},{&quot;label&quot;:&quot;Units&quot;,&quot;type&quot;:&quot;unit&quot;,&quot;min-sf&quot;:&quot;2&quot;}]" validation-box="&quot;automatic without listings&quot;" tans="&quot;matrix([1,2],[3,4])&quot;"/>
    <input name="ans8" type="matrix" matrix-wrap-left="&quot;1...N.&quot;" matrix-mode="&quot;data&quot;" matrix-columns="[{&quot;label&quot;:&quot;Algebraic&quot;,&quot;type&quot;:&quot;algebraic&quot;,&quot;min-dp&quot;:&quot;2&quot;},{&quot;label&quot;:&quot;Numeric&quot;,&quot;type&quot;:&quot;numeric&quot;,&quot;min-dp&quot;:&quot;3&quot;},{&quot;label&quot;:&quot;Units&quot;,&quot;type&quot;:&quot;unit&quot;,&quot;min-sf&quot;:&quot;2&quot;}]" matrix-min-rows="&quot;1&quot;" matrix-max-rows="&quot;5&quot;" matrix-wrap-bottom="&quot;labels&quot;" tans="&quot;matrix([1,2],[3,4])&quot;"/>
    <input name="ans9" type="matrix" matrix-wrap-left="&quot;|&quot;" matrix-wrap-right="&quot;|&quot;" matrix-mode="&quot;data&quot;" matrix-columns="[{&quot;label&quot;:&quot;Algebraic&quot;,&quot;type&quot;:&quot;algebraic&quot;,&quot;min-dp&quot;:&quot;2&quot;},{&quot;label&quot;:&quot;Numeric&quot;,&quot;type&quot;:&quot;numeric&quot;,&quot;min-dp&quot;:&quot;3&quot;},{&quot;label&quot;:&quot;Units&quot;,&quot;type&quot;:&quot;unit&quot;,&quot;min-sf&quot;:&quot;2&quot;}]" matrix-max-rows="&quot;5&quot;" matrix-column-lines="true" validation-box="&quot;automatic with list of units&quot;" tans="&quot;matrix([1,2],[3,4])&quot;"/>
    <input name="ans10" type="mcq" mcq-type="&quot;dropdown&quot;" validation-box="&quot;automatic without listings&quot;" tans="&quot;true&quot;"/>
    <input name="ans11" type="mcq" mcq-options="[{&quot;value&quot;:&quot;sqrt(2)+x&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;sin(x)&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;},{&quot;value&quot;:&quot;x^4+x&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;}]" validation-box="&quot;automatic with list of variables&quot;" mcq-type="&quot;dropdown&quot;" must-verify="true" tans="&quot;sin(x)&quot;"/>
    <input name="ans12" type="mcq" mcq-options="[{&quot;value&quot;:&quot;stackunits(dispdp(1,3),kg)&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;stackunits(dispdp(2,3),kg)&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;}]" mcq-type="&quot;dropdown&quot;" validation-box="&quot;automatic with list of units&quot;" forbid-floats="false" tans="&quot;stackunits(dispdp(1,3),kg)&quot;"/>
    <prt name="testprt" value="1.0000000" firstnodename="Root node" scoremode="best" scoremodeparameters="">
      <feedbackvariables>
<text>/* This PRT exists solely to allow the existense of a test. */
/* That test allows us to define a simple test input. */
/* For that reason it needs to reference all the inputs. */
ans1;ans2;ans3;
ans4;ans5;ans6;
ans7;ans8;ans9;
ans10;ans11;ans12;</text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="ans1" tans="ans1" options="" quiet="0">
        <true scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>
<text>TODO</text>

        </feedback>
          <tests>
<text><![CDATA[[{"name":"Basic input, tests test input definition","condition":"true","inputs":{"ans1":"x+1*kg","ans2":"x+1*kg","ans3":"x+1*kg","ans4":"matrix([1,2],[3,4])","ans5":"matrix([1,2],[3,4],[5,6])","ans6":"matrix([1,2,3],[4,5,6],[7,8,9])","ans7":"matrix([1,2,3*kg],[4,5,stackunits(6,kg)])","ans8":"matrix([1,2,3*kg],[4,5,stackunits(6,kg)])","ans9":"matrix([1,2,3*kg],[4,5,stackunits(6,kg)])","ans10":"true","ans11":"sin(x)","ans12":"stackunits(dispdp(1,3),kg)"}}]]]></text>

        </tests>
        </true>
        <false scoremode="=" score="" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text>TODO</text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
</stateful>  </question>

<!-- question: 837  -->
  <question type="stateful">
    <name>
      <text>TECH: MCQ input options tester</text>
    </name>
    <questiontext format="html">
      <text>Present the options of the MCQ input in action.</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
<stateful statefulversion="2020040800" stackversion="2020040300" entryscene="entry" questionsimplify="1" assumepositive="0" assumereal="0" penalty="0.3333333" multiplicationsign="dot" sqrtsign="1" complexno="i" inversetrig="cos-1" matrixparens="[" parlength="-1" variants="{&quot;_set&quot;:&quot;_free&quot;,&quot;A&quot;:[],&quot;B&quot;:[],&quot;C&quot;:[]}">
  <questionvariables>
<text></text>

  </questionvariables>
  <questionnote>
<text></text>

  </questionnote>
  <scene name="entry">
    <description>
<text>Tech demonstrator for the MCQ-input.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<p>The tables here try to cover most relevant combinations of input options for the MCQ input, not all though.</p>
<p>All inputs have customised validation displays to show the results in more detail than the default validation.</p>

<p>Some examples here have randomisation of ordering or selection of options, you can initialise this question with a different seed to see the randomisation in action. But as this is running on <i>Stateful</i> you can simply click [[input:this]] to switch scene, which will lead to the seed being incremented, in <i>Stateful</i> the seed grows as the path travelled grows to ensure that returning to the same scene latter will give different randomisation.</p>

<h4>The radio type of MCQ input</h4>
<p>One of the more common types of MCQ is the select 1 of N style radio-button based input that allows rich labels for the options.</p>

[[input:ans7]]
[[validation:ans7]]

<p>In addition to 1 of N style of radio-buttons we also have the option of including an "other"-option, which presents the student with an algebraic type input field which is the reason why the MCQ input type has so many options.</p>

[[input:ans8]]
[[validation:ans8]]

<p>The radio-button type by default provides a way of unselecting the value, which is needed as the canonical behaviour of radio-buttons does not allow it and we want to allow students to rethink and leave things unanswered.</p>

[[input:ans9]]
[[validation:ans9]]

<h4>The dropdown type of MCQ input</h4>
<p>The dropdown works well as 1 of N style of input and often can be used as an inline input as opposed to a whole block input object like the others. If used as an inline option the size of the label will naturally be limited.</p>

[[input:ans10]]
[[validation:ans10]]

<p>In addition to the rich variant of dropdown there is the old-style raw HTML-form variant that will work better with screen-readers and other assistive tools but will not provide LaTeX-rendering of the labels.</p>

[[input:ans11]]
[[validation:ans11]]

<h4>Checkboxen, how to select N of M</h4>
<p>For cases where you want to have multiple options from which to select some we have the checkbox-input, which is a somewhat complex beast as typically one has to consider the situation where one would pick 0 of M and thus allow this input to have a blank value. In all cases, however, note that the value generated will be a list and you may want to turn it to a set at some point to deal with the fact that the list is ordered by the presentation order of the selected items. Also, you will probably want to customise the validation message.</p>

[[input:ans12]]
[[validation:ans12]]

<h4>General option set related options</h4>

<h5>Default labels</h5>
<p>If the label is left empty it will be autogenerated from the value.</p>

[[input:ans2]]
[[validation:ans2]]

<h5>Custom labels</h5>
<p>The label text can be pretty much anything in radio buttons and checkboxes but for dropdowns, you will need to constrain yourself. Note however that if the label is too rich and you use have validation-messages active for this input then things may break, like in this example where the validation cannot display the JSXGraph in the label. If you wish to have these kinds of excessively rich labels and validation-messages then you will probably want to use custom validation where you can control/override the labels in more detail.</p>

[[input:ans3]]
[[validation:ans3]]

<h5>Random selection of options</h5>
<p>One can classify options as 'correct' or 'distractor' and define amounts of each to select to the option set. In this example odd-integers are correct and even are distractors, there are five of each and the random selection has been instructed to pick two correct ones and three distractors. Note that this does not randomise the order if you want that and you probably want to toggle the next examples option as well.</p>

[[input:ans4]]
[[validation:ans4]]

<h5>Shuffling of options</h5>
<p>One can ask for the options to be randomly permuted, which can be combined with the previous.</p>

[[input:ans5]]
[[validation:ans5]]

<h5>Selective inclusion of options</h5>
<p>Each option can have a separate expression defining whether it is to be included in the set, this will be done before any options are picked for presentation. One may use this to tie options to the state or other variables. In this example, the odd options appear when the SCENE_PATHs length is odd and even when it is even.</p>

[[input:ans6]]
[[validation:ans6]]]]></text>
    </scenetext>
    <input name="this" type="button" input-label="&quot;this&quot;"/>
    <input name="ans2" type="mcq" mcq-options="[{&quot;value&quot;:&quot;true&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;false&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;},{&quot;value&quot;:&quot;sqrt(2)&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;x^7+y&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;diff(f(x),x)&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;}]" guidance-label="&quot;Default label-render example&quot;" validation-box="&quot;ans2&quot;" tans="&quot;true&quot;"/>
    <input name="ans3" type="mcq" mcq-options="[{&quot;value&quot;:&quot;true&quot;,&quot;label&quot;:&quot;&lt;p style=\&quot;border: 1px solid green;margin:2px;padding:3px;\&quot;&gt;Anything goes here. Feel free to try everything CASText allows.&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;false&quot;,&quot;label&quot;:&quot;&lt;p&gt;Even JSXGraphs.&lt;\/p&gt;\n[[jsxgraph width=\&quot;20em\&quot; height=\&quot;15em\&quot;]]\n  var board = JXG.JSXGraph.initBoard(divid, {boundingbox: [-10, 5, 10, -5], axis: true, showCopyright: false});\n  var f = board.jc.snippet('sin(x)', true, 'x', true);\n  board.create('functiongraph', [f,-10,10]);\n[[\/jsxgraph]]&quot;,&quot;group&quot;:&quot;distractor&quot;}]" validation-box="&quot;ans3&quot;" tans="&quot;true&quot;"/>
    <input name="ans4" type="mcq" mcq-options="[{&quot;value&quot;:&quot;1&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;2&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;},{&quot;value&quot;:&quot;3&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;4&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;5&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;6&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;7&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;8&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;9&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;10&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;}]" mcq-random-corrects="2" mcq-random-distractors="3" validation-box="&quot;ans4&quot;" tans="&quot;1&quot;"/>
    <input name="ans5" type="mcq" mcq-options="[{&quot;value&quot;:&quot;1&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;2&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;},{&quot;value&quot;:&quot;3&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;4&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;5&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;true&quot;}]" mcq-randomise-order="true" validation-box="&quot;ans5&quot;" tans="&quot;1&quot;"/>
    <input name="ans6" type="mcq" mcq-options="[{&quot;value&quot;:&quot;1&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;oddp(length(SCENE_PATH))&quot;},{&quot;value&quot;:&quot;2&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;evenp(length(SCENE_PATH))&quot;},{&quot;value&quot;:&quot;3&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;oddp(length(SCENE_PATH))&quot;},{&quot;value&quot;:&quot;4&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;evenp(length(SCENE_PATH))&quot;},{&quot;value&quot;:&quot;5&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;oddp(length(SCENE_PATH))&quot;},{&quot;value&quot;:&quot;6&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;evenp(length(SCENE_PATH))&quot;},{&quot;value&quot;:&quot;7&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;oddp(length(SCENE_PATH))&quot;},{&quot;value&quot;:&quot;8&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;evenp(length(SCENE_PATH))&quot;},{&quot;value&quot;:&quot;9&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;,&quot;inclusion&quot;:&quot;oddp(length(SCENE_PATH))&quot;},{&quot;value&quot;:&quot;10&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;evenp(length(SCENE_PATH))&quot;}]" validation-box="&quot;ans6&quot;" tans="&quot;1&quot;"/>
    <input name="ans7" type="mcq" mcq-options="[{&quot;value&quot;:&quot;true&quot;,&quot;label&quot;:&quot;&lt;p&gt;{@1+x@}&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;false&quot;,&quot;label&quot;:&quot;&lt;p&gt;{@y-z@}&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;}]" validation-box="&quot;ans7&quot;" tans="&quot;true&quot;"/>
    <input name="ans8" type="mcq" mcq-options="[{&quot;value&quot;:&quot;true&quot;,&quot;label&quot;:&quot;&lt;p&gt;{@1+x@}&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;false&quot;,&quot;label&quot;:&quot;&lt;p&gt;{@y-z@}&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;}]" mcq-type="&quot;radio with other&quot;" validation-box="&quot;ans8&quot;" tans="&quot;true&quot;"/>
    <input name="ans9" type="mcq" mcq-options="[{&quot;value&quot;:&quot;true&quot;,&quot;label&quot;:&quot;&lt;p&gt;{@1+x@}&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;false&quot;,&quot;label&quot;:&quot;&lt;p&gt;{@y-z@}&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;}]" mcq-no-deselect="true" validation-box="&quot;ans9&quot;" tans="&quot;true&quot;"/>
    <input name="ans10" type="mcq" mcq-options="[{&quot;value&quot;:&quot;true&quot;,&quot;label&quot;:&quot;&lt;p&gt;{@sqrt(1+x)@}&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;false&quot;,&quot;label&quot;:&quot;&lt;p&gt;{@y-z@}&lt;\/p&gt;&quot;,&quot;group&quot;:&quot;distractor&quot;}]" mcq-type="&quot;dropdown&quot;" guidance-label="&quot;Dropdown with rich labels&quot;" validation-box="&quot;ans10&quot;" tans="&quot;true&quot;"/>
    <input name="ans11" type="mcq" mcq-options="[{&quot;value&quot;:&quot;sqrt(2)&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;x^2&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;}]" mcq-type="&quot;dropdown&quot;" mcq-dropdown-vanilla="true" validation-box="&quot;ans11&quot;" tans="&quot;true&quot;"/>
    <input name="ans12" type="mcq" mcq-options="[{&quot;value&quot;:&quot;1&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;correct&quot;},{&quot;value&quot;:&quot;2&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;},{&quot;value&quot;:&quot;3&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;4&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;},{&quot;value&quot;:&quot;5&quot;,&quot;label&quot;:&quot;&quot;,&quot;group&quot;:&quot;distractor&quot;,&quot;inclusion&quot;:&quot;true&quot;}]" mcq-type="&quot;checkbox&quot;" validation-box="&quot;ans12&quot;" tans="&quot;[1]&quot;"/>
    <vbox name="ans1" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans1@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans2" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans2@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans3" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans3@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans4" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans4#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans4#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans4#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans4@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans4]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans4]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans4]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans5" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans5#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans5#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans5#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans5@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans5]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans5]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans5]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans6" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans6#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans6#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans6#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans6@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans6]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans6]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans6]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans7" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans7#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans7#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans7#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans7@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans7]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans7]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans7]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans8" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans8#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans8#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans8#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans8@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans8]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans8]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans8]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans9" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans9#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans9#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans9#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans9@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans9]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans9]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans9]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans10" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans10#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans10#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans10#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans10@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans10]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans10]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans10]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans11" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans11#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans11#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans11#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans11@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans11]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans11]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans11]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans12" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans12#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans12#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans12#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans12@}&lt;\/td&gt;&lt;\/tr&gt;\n&lt;tr&gt;&lt;th&gt;Custom presentation&lt;\/th&gt;\n&lt;td&gt;&lt;p&gt;Note that this input types value consists of multiple selected options, its up to you to decide how to display it. In the validation-message size the value comes as a list of the labels, which may not look to good if displayed directly.&lt;\/p&gt;\n&lt;ul&gt;\n[[foreach item=\&quot;ans12\&quot;]]\n&lt;li&gt;{@item@}&lt;\/li&gt;\n[[\/foreach]]\n&lt;\/ul&gt;\n&lt;\/td&gt;\n&lt;\/tr&gt;\n&lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans12]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans12]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans12]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <prt name="PRT1" value="1.0000000" firstnodename="Root node" scoremode="no score" scoremodeparameters="">
      <feedbackvariables>
<text></text>

      </feedbackvariables>
      <node name="Root node" test="AlgEquiv" sans="this" tans="true" options="" quiet="0">
        <true scoremode="=" score="1" penaltymode="=" penalty="" nextnode="$SCENE:entry">
          <variables>
<text>/* There is nothing here it is enough to transition as that adds to the SCENE_PATH which increments the seed. */</text>

        </variables>
          <feedback>
<text>TODO</text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </true>
        <false scoremode="=" score="0" penaltymode="=" penalty="" nextnode="">
          <variables>
<text></text>

        </variables>
          <feedback>\n<text>TODO</text>

        </feedback>
          <tests>
<text>[]</text>

        </tests>
        </false>
      </node>
    </prt>
  </scene>
</stateful>  </question>

<!-- question: 838  -->
  <question type="stateful">
    <name>
      <text>TECH: Numerical input options tester</text>
    </name>
    <questiontext format="html">
      <text>Present the options of the numerical input in action.</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
<stateful statefulversion="2020040800" stackversion="2020040300" entryscene="entry" questionsimplify="1" assumepositive="0" assumereal="0" penalty="0.3333333" multiplicationsign="dot" sqrtsign="1" complexno="i" inversetrig="cos-1" matrixparens="[" parlength="-1" variants="{&quot;_set&quot;:&quot;_free&quot;,&quot;A&quot;:[],&quot;B&quot;:[],&quot;C&quot;:[]}">
  <questionvariables>
<text></text>

  </questionvariables>
  <questionnote>
<text></text>

  </questionnote>
  <scene name="entry">
    <description>
<text>Initial scene for a Stateful-question, no question can exists without a scene.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<p>The tables here try to cover most relevant combinations of input options for the numerical input, not all though. To ease operation we have a single scripted input at the top so that one can set all the inputs values to the same.</p>
<p>All inputs have customised validation displays to show the results in more detail than the default validation. Also the examples are clickable.</p>
<p>Set all to: [[input:ans]]</p>
[[jsxgraph input-ref-ans='inputprefix' height='1px']]
/* JSXGraph blocks allow direct JavaScript access that can be used
 * to do many things, just set the size of the div reserved for the
 * graph that you are not actually building. Or hide it.
 */
var input = $('#' + $.escapeSelector(inputprefix));
input.on('input', function() {
  var val = input.val();
  for (var i=1; i < 20; i++) {
    var otherinput = $('#' + $.escapeSelector(inputprefix + i));
    otherinput.val(val);
    if (otherinput.length > 0) {
      var e = new Event('input');
      otherinput[0].dispatchEvent(e);
      e = new Event('change');
      otherinput[0].dispatchEvent(e);
    }
  }
});
var samples = $('code.clicksample');
samples.on('click', function(e) {
  var val = $(e.target).text();
  for (var i=1; i < 20; i++) {
    var otherinput = $('#' + $.escapeSelector(inputprefix + i));
    otherinput.val(val);
    if (otherinput.length > 0) {
      var e = new Event('input');
      otherinput[0].dispatchEvent(e);
      e = new Event('change');
      otherinput[0].dispatchEvent(e);
    }
  }
});
[[/jsxgraph]]
  
<h4>The acceptable forms of input</h4>
<p>The numerical input only accepts pure numbers as its input the only concession beyond accepting floats or integers is the so-called power of ten representation <code class="clicksample">123*10^45</code> which will be accepted if one so wishes. One can control the acceptance of floats and integers separately but one must allow at least one of them to be able to use the power of ten form.</p>
  
<table>
 <tr><td>&nbsp;</td><td colspan="3">accept_float</td></tr>
 <tr><td colspan="2">&nbsp;</td><td colspan="3">accept_integer</td></tr>
 <tr><td colspan="3">&nbsp;</td><td colspan="3">accept_power_form</td></tr>
 <tr><td><code class="clicksample">0.123*10^333</code></td><td>on</td><td>on</td><td>on</td><td>[[input:ans1]]</td><td>[[validation:ans1]]</td></tr>
 <tr><td><code class="clicksample">123</code></td><td>on</td><td>on</td><td>off</td><td>[[input:ans2]]</td><td>[[validation:ans2]]</td></tr>
 <tr><td><code class="clicksample">+123.1*10^2</code></td><td>on</td><td>off</td><td>on</td><td>[[input:ans3]]</td><td>[[validation:ans3]]</td></tr>
 <tr><td><code class="clicksample">-1230.1</code></td><td>on</td><td>off</td><td>off</td><td>[[input:ans4]]</td><td>[[validation:ans4]]</td></tr>
 <tr><td><code class="clicksample">-123*10^+3</code></td><td>off</td><td>on</td><td>on</td><td>[[input:ans5]]</td><td>[[validation:ans5]]</td></tr>
 <tr><td><code class="clicksample">123</code></td><td>off</td><td>on</td><td>off</td><td>[[input:ans6]]</td><td>[[validation:ans6]]</td></tr>
</table>

<h4>Significant figures</h4>
<p>It is possible to require a given number of significant figures at the input phase instead of the grading phase i.e. in input validation instead of PRTs. One can define minimum and maximum, leaving these settings empty or setting them to less than 1 will mean that they are not enforced. It is also possible to require so-called "strict" significant-figures where the rules may be slightly tighter and less ambiguous than in normal accepted use.</p>

<p>To understand strictness consider the following examples. Firstly the issue with zero which cannot be clearly representted to a given number of significant numbers following the typical rules <code class="clicksample">0.000</code>. Secondly the issue of integer values with trailing zeros but no decimal places, like <code class="clicksample">100</code> vs. <code class="clicksample">0.100e3</code>.</p>

<table>
<tr><th>min-sf</th><th>max-sf</th><th>strict-sf</th></tr>
<tr><td>-1</td><td>3</td><td>false</td><td>[[input:ans9]]</td><td>[[validation:ans9]]</td></tr>
<tr><td>3</td><td>-1</td><td>false</td><td>[[input:ans10]]</td><td>[[validation:ans10]]</td></tr>
<tr><td>3</td><td>3</td><td>true</td><td>[[input:ans11]]</td><td>[[validation:ans11]]</td></tr>
<tr><td>3</td><td>4</td><td>true</td><td>[[input:ans12]]</td><td>[[validation:ans12]]</td></tr>
</table>

<h4>Decimal places</h4>
<p>It is possible to require that he answer is presented with a given number of decimal places, while it is possible to do so at the same time as requiring a specific number of significant-figures it tends to make the process of answering a bit of a puzzle and makes little sense. Again the number of digits may be defined as a range and the range is open if the end is empty or less than 1.</p>

<p><code class="clicksample">0</code>, <code class="clicksample">0.1</code>, <code class="clicksample">0.12</code>, <code class="clicksample">0.123</code>, <code class="clicksample">0.1234</code>, <code class="clicksample">0.12345</code></p>

<table>
<tr><th>min-dp</th><th>max-dp</th></tr>
<tr><td>-1</td><td>3</td><td>[[input:ans13]]</td><td>[[validation:ans13]]</td></tr>
<tr><td>3</td><td>-1</td><td>[[input:ans14]]</td><td>[[validation:ans14]]</td></tr>
<tr><td>3</td><td>3</td><td>[[input:ans15]]</td><td>[[validation:ans15]]</td></tr>
<tr><td>3</td><td>4</td><td>[[input:ans16]]</td><td>[[validation:ans16]]</td></tr>
</table>

<h4>Format conversion</h4>
<p>In some cases one will use the values received in complex calculations where it matters whether the value is exact or a float. For example it may prove to be slower than expected to calculate with <code class="clicksample">0.1*10^234</code> vs. <code class="clicksample">0.1e234</code> or one can suffer from accuracy issues and would prefer to enforce that things get evaluated with exact values. Note that the input will in all cases coerce to power of ten notation if the exponent is too large to be represented in Maxima e.g. the power is beyond -303 and 303. If it did not do that coercion such values would map to zero and infinity by default.</p>

<p>Note that when asking for conversion the code-value will differ from the representation.</p>

<table>
<tr><td>to float</td><td>[[input:ans17]]</td><td>[[validation:ans17]]</td></tr>
<tr><td>to power of ten</td><td>[[input:ans18]]</td><td>[[validation:ans18]]</td></tr>
</table>]]></text>
    </scenetext>
    <input name="ans" type="algebraic" validation-box="&quot;&quot;" must-verify="false" tans="&quot;0&quot;"/>
    <input name="ans1" type="numerical" validation-box="&quot;ans1&quot;" tans="&quot;0&quot;"/>
    <input name="ans2" type="numerical" validation-box="&quot;ans2&quot;" numerical-accept-power-form="false" tans="&quot;0&quot;"/>
    <input name="ans3" type="numerical" validation-box="&quot;ans3&quot;" numerical-accept-float-vs-integer="&quot;no integer&quot;" tans="&quot;0&quot;"/>
    <input name="ans4" type="numerical" validation-box="&quot;ans4&quot;" numerical-accept-float-vs-integer="&quot;no integer&quot;" numerical-accept-power-form="false" tans="&quot;0&quot;"/>
    <input name="ans5" type="numerical" validation-box="&quot;ans5&quot;" numerical-accept-float-vs-integer="&quot;no float&quot;" tans="&quot;0&quot;"/>
    <input name="ans6" type="numerical" validation-box="&quot;ans6&quot;" numerical-accept-float-vs-integer="&quot;no float&quot;" numerical-accept-power-form="false" tans="&quot;0&quot;"/>
    <input name="ans9" type="numerical" validation-box="&quot;ans9&quot;" sf-min="&quot;-1&quot;" sf-max="&quot;3&quot;" tans="&quot;0&quot;"/>
    <input name="ans10" type="numerical" validation-box="&quot;ans10&quot;" sf-min="&quot;3&quot;" sf-max="&quot;-1&quot;" tans="&quot;0&quot;"/>
    <input name="ans11" type="numerical" validation-box="&quot;ans11&quot;" sf-min="&quot;3&quot;" sf-max="&quot;3&quot;" sf-strict="true" tans="&quot;0&quot;"/>
    <input name="ans12" type="numerical" validation-box="&quot;ans12&quot;" sf-min="&quot;3&quot;" sf-max="&quot;4&quot;" sf-strict="true" tans="&quot;0&quot;"/>
    <input name="ans13" type="numerical" validation-box="&quot;ans13&quot;" dp-min="&quot;-1&quot;" dp-max="&quot;3&quot;" tans="&quot;0&quot;"/>
    <input name="ans14" type="numerical" validation-box="&quot;ans14&quot;" dp-min="&quot;3&quot;" dp-max="&quot;-1&quot;" tans="&quot;0&quot;"/>
    <input name="ans15" type="numerical" validation-box="&quot;ans15&quot;" dp-min="&quot;3&quot;" dp-max="&quot;3&quot;" tans="&quot;0&quot;"/>
    <input name="ans16" type="numerical" validation-box="&quot;ans16&quot;" dp-min="&quot;3&quot;" dp-max="&quot;4&quot;" tans="&quot;0&quot;"/>
    <input name="ans17" type="numerical" validation-box="&quot;ans17&quot;" numerical-convert="&quot;to float&quot;" tans="&quot;0&quot;"/>
    <input name="ans18" type="numerical" validation-box="&quot;ans18&quot;" numerical-convert="&quot;to power&quot;" tans="&quot;0&quot;"/>
    <vbox name="ans1" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans1@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans2" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans2@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans3" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans3@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans4" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans4#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans4#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans4#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans4@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans4]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans4]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans4]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans5" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans5#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans5#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans5#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans5@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans5]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans5]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans5]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans6" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans6#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans6#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans6#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans6@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans6]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans6]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans6]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans7" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans7#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans7#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans7#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans7@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans7]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans7]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans7]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans8" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans8#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans8#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans8#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans8@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans8]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans8]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans8]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans9" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans9#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans9#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans9#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans9@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans9]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans9]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans9]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans10" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans10#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans10#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans10#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans10@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans10]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans10]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans10]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans11" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans11#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans11#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans11#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans11@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans11]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans11]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans11]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans12" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans12#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans12#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans12#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans12@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans12]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans12]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans12]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans13" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans13#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans13#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans13#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans13@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans13]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans13]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans13]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans14" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans14#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans14#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans14#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans14@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans14]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans14]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans14]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans15" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans15#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans15#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans15#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans15@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans15]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans15]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans15]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans16" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans16#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans16#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans16#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans16@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans16]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans16]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans16]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans17" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans17#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans17#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans17#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans17@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans17]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans17]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans17]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans18" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans18#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans18#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;{#%_actual_ans18#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans18@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans18]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans18]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans18]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
  </scene>
</stateful>  </question>

<!-- question: 839  -->
  <question type="stateful">
    <name>
      <text>TECH: String input</text>
    </name>
    <questiontext format="html">
      <text>Options of the string input</text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
<stateful statefulversion="2020040800" stackversion="2020040300" entryscene="entry" questionsimplify="1" assumepositive="0" assumereal="0" penalty="0.3333333" multiplicationsign="dot" sqrtsign="1" complexno="i" inversetrig="cos-1" matrixparens="[" parlength="-1" variants="{&quot;_set&quot;:&quot;_free&quot;,&quot;A&quot;:[],&quot;B&quot;:[],&quot;C&quot;:[]}">
  <questionvariables>
<text></text>

  </questionvariables>
  <questionnote>
<text></text>

  </questionnote>
  <scene name="entry">
    <description>
<text>This is just a demonstration of the relevant features of the string input.</text>

    </description>
    <scenevariables>
<text></text>

    </scenevariables>
    <scenetext format="html">
      <text><![CDATA[<p>The string-input is meant for receiving raw string values as Maxima-strings. As such it provides very little validation options and as one cannot do algebra-with strings it is rarely of much use.</p>
<p>However, there are some fields where things can be simpler when working with strings, for example, come algebra and cryptography things can have a real use for strings. Recently the string input has received a new use from JavaScript-based complex interactions like JSXGraphs and other tools generating complex values, in those cases one typically uses the string-input as means for receiving JSON-encoded values from some client-side scripts and the student does not directly interact with the input.</p>
<hr/>
<h4>The simplest input</h4>
<p>In the simplest case one uses the input to just receive single line strings, to do that just leave the declaration of the input-height to the default of 1:</p>
<div>[[input:ans1]]</div>
<div>[[validation:ans1]]</div>
<hr/>
<h4>Multiple lines input</h4>
<p>Dealign with multiple lines may be problematic but one can receive them, again just size the box accordingly, you may also want to customise the valdiation-message as typically the line changes will be lost in rendering:</p>
<div>[[input:ans2]]</div>
<div>[[validation:ans2]]</div>
<hr/>
<h4>JSON input</h4>
<p>While it is possible to parse the string received with a JSON-parser at the Maxima end it will be slower to do there and one would not receive sensible errors from there so if the intention is to use the string just for JSON then one can turn on the JSON-mode where the string gets parsed before it goes to the CAS and one gets some validation messages about parsing errors. Note that in this mode the teacher's answer is not a JSON-encoded value but the parsed structure as it is presented in the CAS. Typically, one hides these fields:</p>
<div>[[input:ans3]]</div>
<div>[[validation:ans3]]</div>]]></text>
    </scenetext>
    <input name="ans1" type="string" validation-box="&quot;ans1&quot;" tans="&quot;\&quot;foo\&quot;&quot;"/>
    <input name="ans2" type="string" input-height="7" input-width="20" validation-box="&quot;ans2&quot;" tans="&quot;\&quot;foo\nbar\&quot;&quot;"/>
    <input name="ans3" type="string" validation-box="&quot;ans3&quot;" string-json-mode="true" input-height="3" syntax-hint="&quot;[1,2]&quot;" tans="&quot;\&quot;\&quot;&quot;"/>
    <vbox name="ans1" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans1#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;&lt;pre&gt;{#%_actual_ans1#}&lt;\/pre&gt;&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans1@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans1]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans2" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans2#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;&lt;pre&gt;{#%_actual_ans2#}&lt;\/pre&gt;&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans2@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans2]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
    <vbox name="ans3" type="custom" text="&quot;&lt;table&gt; &lt;tr&gt;&lt;th&gt;Valid&lt;\/th&gt;&lt;td&gt;{#%_valid_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Blank&lt;\/th&gt;&lt;td&gt;{#%_blank_ans3#}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Code&lt;\/th&gt;&lt;td&gt;&lt;pre&gt;{#%_actual_ans3#}&lt;\/pre&gt;&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Presentation&lt;\/th&gt;&lt;td&gt;{@ans3@}&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Errors&lt;\/th&gt;&lt;td&gt;[[list_errors:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Variables&lt;\/th&gt;&lt;td&gt;[[list_variables:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;tr&gt;&lt;th&gt;Units&lt;\/th&gt;&lt;td&gt;[[list_variables:ans3]]&lt;\/td&gt;&lt;\/tr&gt; &lt;\/table&gt;&quot;"/>
  </scene>
</stateful>  </question>

</quiz>